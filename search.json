[{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://statistik-aargau.github.io/propop/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"evaluate-projections","dir":"Articles","previous_headings":"","what":"Evaluate projections","title":"Evaluate projections","text":"propop provides function compare projections benchmark. benchmark can actual (recorded) population development (.e., official records population registry) base model (e.g., testing alternative models comparing official FSO forecast). Evaluations can carried individually per observation unit like summary statistics aggregated across observations (e.g., years, demographic groups, spatial units).","code":""},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"get-the-data","dir":"Articles","previous_headings":"Evaluate projections","what":"Get the data","title":"Evaluate projections","text":"run evaluation function, need benchmark data results projection. interesting possibility compare real, observed data predicted data. FSO’s projection scenarios just published, aren’t observed data available yet. example therefore uses older data parameters previous FSO model. , run model population 2018 starting population population records 2019-2022 benchmark data. Get parameters projection (note parameters aren’t available anymore; .e., code fail try year 2019-2050): Run population projection 2019-2022:","code":"data_benchmark <- get_population(   number_fso = \"px-x-0102010000_101\",   year = 2018,   year_last = 2022,   spatial_units = \"- Aargau\" ) data_parameters <- get_parameters(   year_first = 2019,   year_last = 2050,   spatial_units = \"Aargau\" ) data_projected <- propop(   parameters = data_parameters |>     dplyr::filter(scen == \"reference\"),   year_first = 2019,   year_last = 2050,   age_groups = 101,   fert_first = 16,   fert_last = 50,   share_born_female = 100 / 205,   # population records from 2018 as starting point   population = data_benchmark |>     dplyr::filter(year == 2018),   subregional = FALSE,   binational = TRUE )"},{"path":[]},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"evaluation-of-observation-units","dir":"Articles","previous_headings":"Evaluate projections > Evaluate 1-year age classes","what":"Evaluation of observation units","title":"Evaluate projections","text":"Let’s first compare projected population growth recorded population development (= benchmark) using one-year age classes (default option). Make sure provide matching data frames, especially terms year ranges spatial units. remove starting population (2018) projection results, also use drop_start_year = TRUE. result prepare_evaluation(), get recorded (n_bench) projected (n_proj) population demographic group year data frame columns next : Based difference observed projected number people, compute_measures() calculates error several performance metrics:","code":"# Combine and pre-process the data combined <- prepare_evaluation(   # only keep years from projected period   data_benchmark = data_benchmark |> dplyr::filter(year > 2018),   n_benchmark = \"n\",   data_projected = data_projected |> dplyr::filter(year > 2018 & year <= 2022),   n_projected = \"n_dec\" )  # Show combined data combined #> # A tibble: 1,616 × 7 #>     year spatial_unit nat   sex     age n_benchmark n_projected #>    <int> <chr>        <chr> <chr> <dbl>       <dbl>       <dbl> #>  1  2019 Aargau       ch    m         0        2622        2510 #>  2  2019 Aargau       ch    m         1        2593        2551 #>  3  2019 Aargau       ch    m         2        2635        2631 #>  4  2019 Aargau       ch    m         3        2596        2609 #>  5  2019 Aargau       ch    m         4        2683        2670 #>  6  2019 Aargau       ch    m         5        2737        2738 #>  7  2019 Aargau       ch    m         6        2636        2633 #>  8  2019 Aargau       ch    m         7        2609        2594 #>  9  2019 Aargau       ch    m         8        2642        2632 #> 10  2019 Aargau       ch    m         9        2657        2654 #> # ℹ 1,606 more rows evaluation_1 <- compute_measures(combined)  #> Warning message: #> The following columns of the output have missing values: #> ! \"pe\" and \"ape\". #> ℹ Missing values are likely to lead to biased evaluation #> measures that cannot be properly interpreted.  # Create table evaluation_1 |>   # select demographic group   dplyr::filter(sex == \"m\" & nat == \"ch\" & age == 27) |>   # round to two digits   dplyr::mutate(across(pe:ape, \\(x) sprintf(fmt = \"%.2f\", x))) |>   DT::datatable(     filter = \"none\",     options = list(dom = 't'),     caption = htmltools::tags$caption(       style = \"caption-side: top; text-align: left; font-weight: bold\",       \"Performance measures for projections with 1-year age classes for the       canton of Aargau 2019-2022; only one demographic group is displayed.\"     )   )"},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"aggregated-evaluation","dir":"Articles","previous_headings":"Evaluate projections > Evaluate 1-year age classes","what":"Aggregated evaluation","title":"Evaluate projections","text":"obtain summary statistics whole projection model, can use aggregate_measures() function:","code":"aggregate_measures(evaluation_1) |>    # round to two digits   dplyr::mutate(across(mpe:ape_under_5, \\(x) sprintf(fmt = \"%.2f\", x))) |>   DT::datatable(     options = list(dom = 't'),     caption = htmltools::tags$caption(       style = \"caption-side: top; text-align: left; font-weight: bold\",       \"Evaluation measures of projection with one-year age classes, aggregated        across all observations.\"     )) #> Warning message: #> The following columns in `data` have missing values: #> ! \"pe\" and \"ape\". #> ℹ Missing values may lead to inaccurate evaluation #> measures."},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"evaluate-larger-age-groups","dir":"Articles","previous_headings":"Evaluate projections","what":"Evaluate larger age groups","title":"Evaluate projections","text":"One-year age classes often lead small group sizes. particularly problematic benchmark equal 0; measures may inaccurate. solution problem use larger age groups contain several years.","code":""},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"evaluation-of-observation-units-1","dir":"Articles","previous_headings":"Evaluate projections > Evaluate larger age groups","what":"Evaluation of observation units","title":"Evaluate projections","text":"Instead using one-year age classes, can conduct evaluation commonly used age groups 0-19 year olds, 20-64 year olds, 64 year olds using option age_groups = \"age_groups_3\".","code":"# Combine and pre-process the data combined_grouped <- prepare_evaluation(   # only keep years from projected period   data_benchmark = data_benchmark |> dplyr::filter(year > 2018),   n_benchmark = \"n\",   data_projected = data_projected |> dplyr::filter(year > 2018 & year <= 2022),   age_groups = \"age_groups_3\",   n_projected = \"n_dec\" )  # Show combined data combined_grouped #> # A tibble: 48 × 7 #>     year spatial_unit age         sex   nat   n_benchmark n_projected #>    <int> <chr>        <chr>       <chr> <chr>       <dbl>       <dbl> #>  1  2019 Aargau       age_00_19   f     ch          49279       49129 #>  2  2019 Aargau       age_00_19   f     int         17818       18118 #>  3  2019 Aargau       age_00_19   m     ch          52389       52076 #>  4  2019 Aargau       age_00_19   m     int         19323       19566 #>  5  2019 Aargau       age_20_64   f     ch         151860      151781 #>  6  2019 Aargau       age_20_64   f     int         56115       56380 #>  7  2019 Aargau       age_20_64   m     ch         149279      149263 #>  8  2019 Aargau       age_20_64   m     int         66770       67029 #>  9  2019 Aargau       age_65_plus f     ch          59729       59847 #> 10  2019 Aargau       age_65_plus f     int          6311        6332 #> # ℹ 38 more rows  # Compute the performance measures evaluation_2 <- compute_measures(combined_grouped)   evaluation_2 |>   # select demographic group   dplyr::filter(sex == \"m\" & nat == \"ch\" & age == \"age_20_64\") |>   # round to two digits   dplyr::mutate(across(pe:ape, \\(x) sprintf(fmt = \"%.2f\", x))) |>   DT::datatable(     options = list(dom = 't'),     caption = htmltools::tags$caption(       style = \"caption-side: top; text-align: left; font-weight: bold\",       \"Performance measures for projections with three age classes for the       canton of Aargau 2019-2022; only one demographic group is displayed.\"     )   )"},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"aggregated-evaluation-1","dir":"Articles","previous_headings":"Evaluate projections > Evaluate larger age groups","what":"Aggregated evaluation","title":"Evaluate projections","text":"can use aggregate_measures() obtain summary evaluation across observations:","code":"aggregate_measures(evaluation_2) |>    # round to two digits   dplyr::mutate(across(mpe:ape_under_5, \\(x) sprintf(fmt = \"%.2f\", x))) |>   DT::datatable(     options = list(dom = 't'),     caption = htmltools::tags$caption(       style = \"caption-side: top; text-align: left; font-weight: bold\",       \"Evaluation measures for projection with three age classes, aggregated        across all observations.\"     ))"},{"path":[]},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"evaluation-of-observation-units-2","dir":"Articles","previous_headings":"Evaluate projections > Using group weights","what":"Evaluation of observation units","title":"Evaluate projections","text":"Furthermore, can use weights. using weighted metric, adjusted absolute percentage errors weigh less heavily smaller groups larger groups. adjusted metric w_ape considers smaller groups tend larger forecast errors. illustrated following table: unweigthed percentage errors (ape) 0.39/0.36 become 0.24/0.07 weighted total number people per group (w_ape).","code":"evaluation_3 <- compute_measures(combined_grouped, weight_groups = c(\"age\"))   evaluation_3 |>   dplyr::filter(year == 2019 & ape > .34 & ape < .39) |>   dplyr::mutate(across(pe:w_ape, \\(x) sprintf(fmt = \"%.2f\", x))) |>   DT::datatable(     options = list(dom = 't'),     caption = htmltools::tags$caption(       style = \"caption-side: top; text-align: left; font-weight: bold\",       \"Selected results showing the effect of using weights        (ape versus w_ape).\"     ),   ) |>    DT::formatStyle(     columns = c('ape', 'w_ape'),     backgroundColor = '#96D4FF'     )"},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"aggregated-evaluation-2","dir":"Articles","previous_headings":"Evaluate projections > Using group weights","what":"Aggregated evaluation","title":"Evaluate projections","text":"can also use aggregate_measures() obtain summary evaluation weighted groups:","code":"aggregate_measures(evaluation_3, weight_groups = c(\"age\")) |>    # round to two digits   dplyr::mutate(across(mpe:ape_under_5, \\(x) sprintf(fmt = \"%.2f\", x))) |>   DT::datatable(options = list(dom = 't'))"},{"path":"https://statistik-aargau.github.io/propop/articles/evaluate.html","id":"propop-versus-fso","dir":"Articles","previous_headings":"Evaluate projections","what":"propop versus FSO","title":"Evaluate projections","text":"Instead comparing propop projection population records, can also use evaluation function check close propop projection comes FSO’s projection 2025 model. example data, differences extremely small (error <= 1):  Furthermore, across 404 demographic groups 31 years, largest difference FSO projections {propop} just one person (using exact starting population, publicly available).","code":"fso_propop <- prepare_evaluation(   data_benchmark = data_parameters |>     dplyr::filter(scen == \"reference\" & year > 2023) |>     dplyr::mutate(n = fso_projection_n),   n_benchmark = \"n\",   data_projected = data_projected |>     dplyr::filter(year > 2023),   age_groups = \"age_groups_3\",   n_projected = \"n_dec\" ) |>   compute_measures()  fso_propop |>   dplyr::mutate(across(pe:ape, \\(x) sprintf(fmt = \"%.3f\", x))) |>   DT::datatable(     filter = \"top\",     caption = htmltools::tags$caption(       style = \"caption-side: top; text-align: left; font-weight: bold\",       \"Comparison of projetions from FSO versus `propop`.\"     )   )"},{"path":"https://statistik-aargau.github.io/propop/articles/prepare_data.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Prepare data","text":"run projections propop, need starting population projection parameters. can either use data download Federal Statistical Office (FSO). vignette explains get data FSO. ’ll also learn prepare relevant information run population projections propop. Note data available certain administrative levels.","code":""},{"path":"https://statistik-aargau.github.io/propop/articles/prepare_data.html","id":"required-data","dir":"Articles","previous_headings":"","what":"Required data","title":"Prepare data","text":"don’t information data required run propop::propop() (propop::project_raw()), can download data STAT-TAB. specifically, information following tables needed: Overview required FSO tables (STAT-TAB) Inter-cantonal immigration Inter-cantonal emigration International immigration International emigration end year population size 101 101 Births per mother Mortality International emigration Inter-cantonal emigration Acquisition Swiss citizenship Live newborns Live births age nationality mother (varies cantons) Start (16) end (50) fertile age women Proportion newborns female sex (100/205)","code":""},{"path":"https://statistik-aargau.github.io/propop/articles/prepare_data.html","id":"convenient-way-to-get-fso-data","dir":"Articles","previous_headings":"","what":"Convenient way to get FSO data","title":"Prepare data","text":"propop provides two convenience functions download data FSO. strongly based BFS package documentation. get starting population spatial unit, must use spelling defined corresponding FSO table. entries FSO tables may contain special characters. spelling may also vary FSO tables. BFS::bfs_get_metadata() helpful identify required spelling(s). ’s example get population canton Aargau: Get parameters sample canton (mind using spelling FSO tables; see comment ): projection can run follows: Note caution: long FSO’s API interface underlying data structure remain stable, functions work. However, changes API likely break functions.","code":"library(propop)  ag_population <- get_population(   number_fso = \"px-x-0102010000_101\",   year = 2023,    spatial_units = \"- Aargau\" ) ag_parameters <- get_parameters(   year = 2024,   year_last = 2026,   spatial_units = \"Aargau\" ) # select reference scenario ag_parameters_ref <- ag_parameters |>   dplyr::filter(scen == \"reference\")  propop(   parameters = ag_parameters_ref,   year = 2024,   year_last = 2026,   age_groups = 101,   fert_first = 16,   fert_last = 50,   share_born_female = 100 / 205,   population = ag_population,   subregional = FALSE,   binational = TRUE )"},{"path":"https://statistik-aargau.github.io/propop/articles/project_single_region.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Projections for a single region","text":"vignette explains use propop::propop() perform population projections single region canton (projections subregions, see vignette). function tailored context Switzerland. uses cohort component method cantonal scenarios, developed Federal Statistical Office (FSO, 2020; available French). run function, need following input: data frame starting population, , --date number people demographic group first projection year; illustrate, example population data propop 31. December  data frame containing model parameters, , information key demographic variables mortality expected develop future; available 2024-2055. global arguments change time across demographic groups (e.g., proportion female male newborns). Importantly, two data frames’ structure (number, names, type columns) must correspond exactly specifications shown vignette. Among things, mandatory provide two levels sex. Nationality can either one two levels. function requires 1-year age groups ranging 0 100 (incl. older).","code":""},{"path":"https://statistik-aargau.github.io/propop/articles/project_single_region.html","id":"projections-for-a-single-region","dir":"Articles","previous_headings":"","what":"Projections for a single region","title":"Projections for a single region","text":"package propop includes population data canton Aargau 2023 FSO parameters population development scenarios 2025. Using resources, can project population canton whole 1-year age groups period 2024-2055. start end women’s fertile period, proportion babies born female, share babies born mothers Swiss stable parameters defined propop::project_raw() passed propop::propop(). output file includes number people January  (n_jan) number people December  (n_dec) per demographic group year. components used project population growth start end year also included output. Thus, elements cohort component equation directly available output. Note number people acquire Swiss citizenship (acq) added demographic group Swiss subtracted demographic group different nationality.","code":"projection_canton_2030 <- propop(   parameters = fso_parameters |>      dplyr::filter(scen == \"reference\"),   year_first = 2024,   year_last = 2030,   population = fso_population,   subregional = FALSE,   binational = TRUE ) #> Running projection for: Aargau (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> ✔ Year: 2027 #> ✔ Year: 2028 #> ✔ Year: 2029 #> ✔ Year: 2030 #>  #> ── Settings used for the projection ──────────────────────────────────────────── #> Scenario(s): \"reference\" #> Year of starting population: 2023 #> Number of age groups: 101 #> Fertile period: 16-50 #> Share of female newborns: 0.488 #> Size of starting population: 726894 #> Projection period: 2024-2030 #> Nationality-specific projection: \"yes\" #> Subregional migration: \"no\" #> ──────────────────────────────────────────────────────────────────────────────── #> Projected population size by 2030: #> - Scenario \"reference\": 781521 #> ════════════════════════════════════════════════════════════════════════════════  projection_canton_2030 |>   # round to 2 digits   dplyr::mutate(across(n_jan:n_dec, \\(x) sprintf(fmt = \"%.0f\", x))) |>   DT::datatable(filter = \"top\") |>    DT::formatStyle(   'n_jan',   backgroundColor = '#ffcc8f' ) |>    DT::formatStyle(   c(\"births\", \"mor\", \"emi_int\", \"emi_nat\", \"imm_int\", \"imm_nat\", \"acq\"),   backgroundColor = '#96D4FF' ) |>    DT::formatStyle(   'n_dec',   backgroundColor = '#007AB8' )"},{"path":"https://statistik-aargau.github.io/propop/articles/project_single_region.html","id":"no-distinction-between-nationalities","dir":"Articles","previous_headings":"","what":"No distinction between nationalities","title":"Projections for a single region","text":"version 0.2.0, possible run projections without distinguishing Swiss non-Swiss nationals. simplest way achieve provide population data parameters without nationality-specific columns (remove nat, acq, births_int_ch). Let’s adapt input files accordingly. keep things simple, run projection non-Swiss nationals. goes without saying using propop::propop() like real settings requires preparation (e.g., determining single value joint population parameters differ Swiss non-Swiss people). calling propop::propop(), need set binational = FALSE.  ","code":"fso_parameters_int <- fso_parameters |>   # drop Swiss people, keep reference scenario     dplyr::filter(nat == \"int\" & scen == \"reference\") |>   #   remove `nat`, `acq` and `births_int_ch` from `parameters`     dplyr::select(-c(nat, acq, int_mothers))  fso_population_int <- fso_population |>  # drop Swiss people     dplyr::filter(nat == \"int\") |>     # remove `nat` from `population`      dplyr::select(-nat) projection_int <- propop(   parameters = fso_parameters_int|>      dplyr::filter(scen == \"reference\"),   year_first = 2024,   year_last = 2030,   population = fso_population_int,   subregional = FALSE,   binational = FALSE ) #> Running projection for: Aargau (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> ✔ Year: 2027 #> ✔ Year: 2028 #> ✔ Year: 2029 #> ✔ Year: 2030 #>  #> ── Settings used for the projection ──────────────────────────────────────────── #> Scenario(s): \"reference\" #> Year of starting population: 2023 #> Number of age groups: 101 #> Fertile period: 16-50 #> Share of female newborns: 0.488 #> Size of starting population: 198599 #> Projection period: 2024-2030 #> Nationality-specific projection: \"no\" #> Subregional migration: \"no\" #> ──────────────────────────────────────────────────────────────────────────────── #> Projected population size by 2030: #> - Scenario \"reference\": 252660 #> ════════════════════════════════════════════════════════════════════════════════ #> Warning message: #> When comparing `imm_int_n` from `parameters` with `imm_int` in the results #> (scenario = 'reference'), there is an unexpected discrepancy in the number of #> people for at least one demographic group in at least one year. #> Warning message: #> When comparing `imm_nat_n` from `parameters` with `imm_nat` in the results #> (scenario = 'reference'), there is an unexpected discrepancy in the number of #> people for at least one demographic group in at least one year.  projection_int |>   # round to two digits   dplyr::mutate(across(n_jan:n_dec, \\(x) sprintf(fmt = \"%.0f\", x))) |>   DT::datatable(filter = \"top\")"},{"path":"https://statistik-aargau.github.io/propop/articles/project_subregions.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Projections for subregions","text":"vignette explains use propop::propop() perform population projections multiple regions particularly subregions within larger spatial entity (e.g., municipalities within canton). discusses two challenges arise conducting projections presents potential strategies addressing : obtain required input data spatial entities level cantons? account migration subregions? background general information required input data, see vignette).","code":""},{"path":"https://statistik-aargau.github.io/propop/articles/project_subregions.html","id":"projection-parameters-for-subregions","dir":"Articles","previous_headings":"","what":"Projection parameters for subregions","title":"Projections for subregions","text":"Numeric information demographic processes births, migration, deaths essential prerequisite population projections. However, Switzerland information typically available cantons spatial entities smaller scales. Supplying input data spatial units sub-cantonal level (e.g.  municipalities) can straightforward data expressed rates (e.g.  mortality rate). simplest approach use figures subregions canton (unless figures implausible theoretical empirical reasons). task demanding, though, want alter rates subregions need downscale input data expressed “number people”. don’t offer solution adjust rates (yet), next two sections show two possibilities distribute cantonal “number people” estimates among subregions.","code":""},{"path":"https://statistik-aargau.github.io/propop/articles/project_subregions.html","id":"distribution-of-people-according-to-population-size","dir":"Articles","previous_headings":"Projection parameters for subregions","what":"Distribution of people according to population size","title":"Projections for subregions","text":"simple approach allocate canton-wide “number people” estimates subregions determine subregion’s population size relative canton’s total population distribute numbers accordingly. put somewhat simplistically, municipality represents 10% canton’s population, proportionally receive 10% canton’s incoming migrants. approach described sophisticated uses spatial units’ shares per demographic group core idea . Let us look concrete, numeric example. sake simplicity, use data included package create small, fictitious input data five regions: Input parameters (step, rates numbers subregions still identical whole canton): Population data: calculate shares, count number people demographic group across spatial units (sum_n). Next, share obtained dividing spatial unit’s n sum people across spatial units respective demographic group (sum_n). Note sum five region’s shares 1 (e.g., 0.21 + 0.17 + 0.17 + 0.33 + 0.12 = 1).   Now required data available can distribute input variables expressed “number people” among subregions. Let’s immigration countries (imm_int_n) immigration cantons (imm_nat_n). first join data frame containing projection parameters (fso_parameters_sub) data frame containing shares (df_population_shares). Identifiers demographic groups must present data frames. actual distribution involves single line per parameter canton-wide number immigrants (imm_int_n imm_nat_n) multiplied share (share), approach identical types immigration. Let’s take closer look result , focusing immigration countries. table , blue columns check difference show sum distributed parameter (imm_int_n_distr) adds total number people (imm_int_n; .e., original figures provided FSO whole canton). proceed projection, columns distributed immigration (imm_int_n_distr imm_nat_n_distr) need become new imm_int_n imm_nat_n. Otherwise, propop() won’t recognize parameters. Now can run projection:","code":"# FSO parameters for fictitious subregions fso_parameters_sub <- fso_parameters |>   dplyr::filter(scen == \"reference\") |>    # duplicating rows 5 times   tidyr::uncount(5) |>   # create 5 subregions   dplyr::mutate(spatial_unit = rep(1:5, times = nrow(fso_parameters |>                                                         dplyr::filter(                                                          scen == \"reference\")))) |>   dplyr::mutate(spatial_unit = as.character(spatial_unit)) # Generate 5 random \"cuts\" to distribute the original population;  # use range 0.1-0.5 to avoid very small or very large regions cut_1 <- {   set.seed(1)   round(runif(1, min = 0.1, max = 0.5), digits = 2) } cut_2 <- {   set.seed(2)   round(runif(1, min = 0.1, max = 0.5), digits = 2) } cut_3 <- {   set.seed(3)   round(runif(1, min = 0.1, max = 0.5), digits = 2) } cut_4 <- {   set.seed(4)   round(runif(1, min = 0.1, max = 0.5), digits = 2) } # Create last cut so that everything adds up to 100% cut_5 <- 1 - cut_1 - cut_2 - cut_3 - cut_4  # Generate population data for five subregions df_population <- fso_population |>   # duplicating rows 5 times   tidyr::uncount(5) |>   # create 5 subregions   dplyr::mutate(     spatial_unit = as.character(rep(1:5, times = nrow(fso_population)))   ) |>   dplyr::mutate(     # Distribute original population according to \"cuts\"     n = dplyr::case_match(       spatial_unit,       \"1\" ~ round(n * cut_1),       \"2\" ~ round(n * cut_2),       \"3\" ~ round(n * cut_3),       \"4\" ~ round(n * cut_4),       \"5\" ~ round(n * cut_5),       .default = NA     ),     .keep = \"all\"   ) # Calculate shares df_population_shares <- df_population |>   dplyr::mutate(sum_n = sum(n), .by = c(nat, sex, age)) |>   dplyr::mutate(share = n / sum_n)  # Display table df_population_shares |>   dplyr::mutate(share = round(share, 3)) |>   DT::datatable() |>   DT::formatStyle(c(\"share\"),                   backgroundColor = DT::styleRow(c(1:5), \"#96D4FF\", default = \"\")   ) parameters_sub_size <- fso_parameters_sub |>   dplyr::left_join(     df_population_shares |>       dplyr::select(\"spatial_unit\", \"nat\", \"sex\", \"age\", \"share\"),     by = c(\"spatial_unit\", \"nat\", \"sex\", \"age\")   ) |>   dplyr::mutate(     # Calculate number of incoming people per demographic group and spatial unit     imm_int_n_distr = imm_int_n * share,     imm_nat_n_distr = imm_nat_n * share   ) parameters_sub_size |>   dplyr::mutate(     check = round(sum(imm_int_n_distr), 0),     .by = c(year, nat, sex, age)   ) |>   dplyr::filter(sex == \"m\" & nat == \"int\") |>   dplyr::mutate(across(c(     \"int_mothers\":\"emi_nat\", \"acq\", \"share\":\"imm_nat_n_distr\"   ), \\(x) round(x, 3))) |>   dplyr::mutate(difference = imm_int_n - check) |>   dplyr::select(-scen) |>   # Only use selection of years to save space   dplyr::filter(year < 2027) |>    DT::datatable() |>   DT::formatStyle(     \"imm_int_n\",     backgroundColor = \"#ffcc8f\"   ) |>   DT::formatStyle(     c(\"check\", \"difference\"),     backgroundColor = \"#96D4FF\"   ) parameters_sub_size_clean <- parameters_sub_size |>   dplyr::mutate(     # Rename variables     imm_int_n = imm_int_n_distr,     imm_nat_n = imm_nat_n_distr   ) |>   dplyr::select(-share, -imm_int_n_distr) propop(   parameters = parameters_sub_size_clean |>      dplyr::filter(scen == \"reference\"),   year_first = 2024,   year_last = 2026,   age_groups = 101,   fert_first = 16,   fert_last = 50,   share_born_female = 100 / 205,   population = df_population,   binational = TRUE,   subregional = FALSE ) #> Running projection for: 1 (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> Running projection for: 2 (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> Running projection for: 3 (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> Running projection for: 4 (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> Running projection for: 5 (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #>  #> ── Settings used for the projection ──────────────────────────────────────────── #> Scenario(s): \"reference\" #> Year of starting population: 2023 #> Number of age groups: 101 #> Fertile period: 16-50 #> Share of female newborns: 0.488 #> Size of starting population: 726903 #> Projection period: 2024-2026 #> Nationality-specific projection: \"yes\" #> Subregional migration: \"no\" #> ──────────────────────────────────────────────────────────────────────────────── #> Projected population size by 2026: #> - Scenario \"reference\": 750939 #> ════════════════════════════════════════════════════════════════════════════════ #> # A tibble: 6,060 × 17 #>     year scen  spatial_unit   age sex   nat   n_jan births   mor emi_int emi_nat #>    <dbl> <fct> <fct>        <dbl> <fct> <fct> <dbl>  <dbl> <dbl>   <dbl>   <dbl> #>  1  2024 refe… 1                0 m     ch        0   517. 1.89    0.630    4.41 #>  2  2024 refe… 1                1 m     ch      498     0  0.210   2.32    10.3  #>  3  2024 refe… 1                2 m     ch      534     0  0.209   2.31    11.8  #>  4  2024 refe… 1                3 m     ch      607     0  0.206   2.52    11.3  #>  5  2024 refe… 1                4 m     ch      581     0  0       2.31     9.24 #>  6  2024 refe… 1                5 m     ch      587     0  0       2.10     7.98 #>  7  2024 refe… 1                6 m     ch      584     0  0       2.10     6.93 #>  8  2024 refe… 1                7 m     ch      585     0  0       1.89     6.09 #>  9  2024 refe… 1                8 m     ch      572     0  0       1.68     5.04 #> 10  2024 refe… 1                9 m     ch      596     0  0       1.68     4.62 #> # ℹ 6,050 more rows #> # ℹ 6 more variables: imm_int <dbl>, imm_nat <dbl>, acq <dbl>, n_dec <dbl>, #> #   delta_n <dbl>, delta_perc <dbl>"},{"path":"https://statistik-aargau.github.io/propop/articles/project_subregions.html","id":"distribution-of-people-according-to-past-migration","dir":"Articles","previous_headings":"Projection parameters for subregions","what":"Distribution of people according to past migration","title":"Projections for subregions","text":"second approach distribute “number people” estimates among subregions uses historical migration records. advantage approach can differentiate different types migration (number--people input) thereby enables adjusting parameter independently (rather using share adapting parameters). great, example, immigration cantons differs immigration countries. illustrate approach, use international immigration example create fictitious data frame five regions. pedagogical reasons, modify data little bit. Spatial unit 1 won’t international immigration among children aged 0-4 years. Consequently, value column hist_imm_int contains zeros entries. doesn’t reflect realistic conditions helps illustrate suggested procedure cases zero observations exist demographic groups. real data, can achieved summarizing historical migration data. Since real migration usually varies year year, advise calculating average across several years. fictitious data assumes already performed step. resulting data frame includes two columns (fictitious) immigration abroad (hist_imm_nat) cantons (hist_imm_nat), aggregated per demographic group:   challenge records often vary considerably years. patterns uneven, future trends may become erratic, especially groups people (e.g., small municipalities small age groups). first step mitigate issue already happened stage, namely considering several years using arithmetic mean estimate demographic group’s past migration. propop::calculate_shares() offers additional remedy. Instead using shares based 1-year age groups, possible resort 5-year 10-year age groups, smooths irregular patterns. use function, need provide data frame containing column number immigrants per demographic group (e.g., hist_imm_nat hist_imm_int calculated ). function assigns 1-year age group 5-year 10-year age group (e.g., 2-year olds become part age_groups 0-4 0-9) sums observations within respective 5-year 10-year age group (e.g., 0-4 0-9 year old Swiss males). sums (sum_5and sum_10 table ) divided five ten, respectively, equally assigned “member” age group (prop_5 prop_10 table ). distribute canton-wide numbers among subregions, propop::calculate_shares() uses 1-year age group mean share larger zero. immigration recorded particular 1-year age group (e.g., 76-year old Swiss males spatial unit 1), mean share corresponding 5-year age group used (.e., 75-79-year old Swiss males case 76-year old). share across 5-year age group also zero, 10-year age group used (70-79 year old Swiss males). case, prop_10 share respective 10-year age group used 5-year age groups within 10-year age group (e.g., 70-74 75-79 year olds). variable use_age_group indicates share suggested default algorithm. final outcome share indicates proportion historical total per demographic group (n_sum) allocated respective spatial unit (share =  n / n_sum).   Note summarizing shares demographic group across spatial units always adds 1: now , procedure identical first approach distributed number people according population size. , share multiplied numbers FSO estimated whole canton. quick double-check confirms sums migration subregions identical number people larger unit (whole canton):  Now everything ready run projection:","code":"set.seed(145)  # Immigration records df_hist_imm <- tibble::tibble(   # five fictitious spatial units   spatial_unit = rep(c(\"1\", \"2\", \"3\", \"4\", \"5\"), each = 101 * 4),   # two nationalities   nat = rep(rep(c(\"ch\", \"int\"), each = 2 * 101), times = 5),   # two levels for sex   sex = rep(rep(c(\"m\", \"f\"), each = 101), times = 5 * 2),   # age groups from 0 to 100   age = rep(0:100, times = 5 * 4) ) |>   dplyr::mutate(     # random numbers between zero and 50 are created to mimic historical     # immigration records observed in Aargau     hist_imm_nat = sample(0:50, dplyr::n(), replace = TRUE),     hist_imm_int = sample(0:50, dplyr::n(), replace = TRUE),     # for one spatial unit, we artificially assign zeros to all children     # between 0-4 years     hist_imm_int = ifelse(spatial_unit == 1 & age %in%                             c(0:4), 0, hist_imm_int)   ) df_hist_imm |>   DT::datatable() data_distr_hist_int <- df_hist_imm |>   calculate_shares(col = \"hist_imm_int\", age_group = \"age_group_5\")  data_distr_hist_int |>   # Display rounded numbers to save space   dplyr::mutate(share = round(share, 3)) |>   DT::datatable() |>   DT::formatStyle(     \"n\",     backgroundColor = \"#96D4FF\"   ) |>   DT::formatStyle(     \"n_sum\",     backgroundColor = \"#96D4FF\"   ) |>   DT::formatStyle(     \"share\",     backgroundColor = \"#007AB8\"   ) data_distr_hist_int |>   dplyr::summarise(sum_share = round(     sum(share, na.rm = TRUE),     digits = 1), .by = c(nat, sex, age)) |>   DT::datatable() # In addition to international immigration shares and numbers # we also need the shares and numbers for national immigration data_distr_hist_nat <- df_hist_imm |>   calculate_shares(col = \"hist_imm_nat\") |>   # Use unambiguous name   dplyr::rename(share_imm_nat = share) |>   # Drop unnecessary variables   dplyr::select(-c(     \"hist_imm_nat\", \"hist_imm_int\", \"age_group_5\", \"sum_5\", \"prop_5\",      \"age_group_10\", \"sum_10\", \"prop_10\", \"use_age_group\", \"n\", \"n_sum\"   ))  # Join both data frames holding shares data_distr_hist <- data_distr_hist_int |>   # Use unambiguous name   dplyr::rename(share_imm_int = share) |>   # Drop unnecessary variables   dplyr::select(-c(     \"hist_imm_nat\", \"hist_imm_int\", \"age_group_5\", \"age_group_10\", \"sum_10\",     \"prop_10\", \"use_age_group\", \"n\", \"n_sum\"   )) |>   dplyr::left_join(data_distr_hist_nat,                    by = c(\"spatial_unit\", \"nat\", \"sex\", \"age\")   )  # Add shares to the data frame that holds the projection parameters fso_parameters_sub_distr_hist <- fso_parameters_sub |>   dplyr::left_join(     data_distr_hist |>       dplyr::select(         \"spatial_unit\", \"nat\", \"sex\", \"age\", \"share_imm_int\", \"share_imm_nat\"       ),     by = c(\"spatial_unit\", \"nat\", \"sex\", \"age\"),     relationship = \"many-to-one\"   ) |>   # Compute `n` for subregions, assign values directly to imm_int_n and imm_nat_n   dplyr::mutate(     imm_int_n = imm_int_n * share_imm_int,     imm_nat_n = imm_nat_n * share_imm_nat   ) |>   # Remove unnecessary variables   dplyr::select(-c(\"share_imm_int\", \"share_imm_nat\"))  # Show result fso_parameters_sub_distr_hist |>   # Remove variables for better overview   dplyr::select(-fso_projection_n, -scen) |>   head(100) |>   dplyr::mutate(across(     c(\"int_mothers\":\"imm_nat_n\"), \\(x) sprintf(fmt = \"%.3f\", x)   )) |>   DT::datatable() check_sums_subregions <- fso_parameters_sub_distr_hist |>   # add up number of people in different spatial units   dplyr::summarise(     sum_imm_int_sub = round(sum(imm_int_n, na.rm = TRUE), digits = 0),      sum_imm_nat_sub = round(sum(imm_nat_n, na.rm = TRUE), digits = 0),      .by = c(nat, sex, age, year)) |>   # join with original input data (for the whole canton)   dplyr::left_join(fso_parameters, by = c(\"nat\", \"sex\", \"age\", \"year\")) |>     # calculate difference between immigration at the level of subregions and canton    dplyr::mutate(     diff_int = sum_imm_int_sub - imm_int_n,     diff_nat = sum_imm_nat_sub - imm_nat_n,   )   # All observed differences are equal to zero unique(check_sums_subregions$diff_int) #>  [1]   0  -1   1  -7   6  -4   7  -6   5  -5   4  -3   3  -2   2 -14  14 -11  13 #> [20] -12  11  10 -10  -9   9   8  -8 -13 -17  17 -21  20 -25  25 -29  28 -32  32 #> [39] -35  34 -36  36 -38  37 -39  39 -40  38 -37 -34 -33 -31  31  29 -28 -26  27 #> [58] -23  23 -22  22  21 -19 -18  19 -16  16  12 -30  30 -27  26 -24  24 -20  18 #> [77]  15  33 -15  35 unique(check_sums_subregions$diff_nat) #>  [1]   0   7  -7   8  -1   1  -6   3  -8   6   2  -4  -3  -2   4 -11  -9   5  -5 #> [20]   9 -10  10  11  12 -12  13 -13  14  16 -14 -15  17  15 -16  18 -17 -18 -19 #> [39]  19 -20  20 -21  22  23 propop(   parameters = fso_parameters_sub_distr_hist|>      dplyr::filter(scen == \"reference\"),   year_first = 2024,   year_last = 2026,   age_groups = 101,   fert_first = 16,   fert_last = 50,   share_born_female = 100 / 205,   population = df_population,   binational = TRUE,   subregional = FALSE ) #> Running projection for: 1 (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> Running projection for: 2 (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> Running projection for: 3 (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> Running projection for: 4 (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> Running projection for: 5 (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #>  #> ── Settings used for the projection ──────────────────────────────────────────── #> Scenario(s): \"reference\" #> Year of starting population: 2023 #> Number of age groups: 101 #> Fertile period: 16-50 #> Share of female newborns: 0.488 #> Size of starting population: 726903 #> Projection period: 2024-2026 #> Nationality-specific projection: \"yes\" #> Subregional migration: \"no\" #> ──────────────────────────────────────────────────────────────────────────────── #> Projected population size by 2026: #> - Scenario \"reference\": 751167 #> ════════════════════════════════════════════════════════════════════════════════ #> # A tibble: 6,060 × 17 #>     year scen  spatial_unit   age sex   nat   n_jan births   mor emi_int emi_nat #>    <dbl> <fct> <fct>        <dbl> <fct> <fct> <dbl>  <dbl> <dbl>   <dbl>   <dbl> #>  1  2024 refe… 1                0 m     ch        0   514. 1.85    0.626    4.38 #>  2  2024 refe… 1                1 m     ch      498     0  0.208   2.32    10.3  #>  3  2024 refe… 1                2 m     ch      534     0  0.207   2.31    11.8  #>  4  2024 refe… 1                3 m     ch      607     0  0.206   2.52    11.3  #>  5  2024 refe… 1                4 m     ch      581     0  0       2.31     9.24 #>  6  2024 refe… 1                5 m     ch      587     0  0       2.10     7.98 #>  7  2024 refe… 1                6 m     ch      584     0  0       2.10     6.93 #>  8  2024 refe… 1                7 m     ch      585     0  0       1.89     6.09 #>  9  2024 refe… 1                8 m     ch      572     0  0       1.68     5.04 #> 10  2024 refe… 1                9 m     ch      596     0  0       1.68     4.62 #> # ℹ 6,050 more rows #> # ℹ 6 more variables: imm_int <dbl>, imm_nat <dbl>, acq <dbl>, n_dec <dbl>, #> #   delta_n <dbl>, delta_perc <dbl>"},{"path":"https://statistik-aargau.github.io/propop/articles/project_subregions.html","id":"migration-between-subregions","dir":"Articles","previous_headings":"","what":"Migration between subregions","title":"Projections for subregions","text":"propop may account migration subregions. adjust population size subregion according past migration, column mig_sub (= migration subregions) required parameter data frame. add mig_sub fictitious parameter parameter input file. real life may use population register records described section “Distribution people according past migration”. Now required input files available, can set subregional TRUE use propop::propop():","code":"parameters_sub_mig <- fso_parameters_sub_distr_hist |>   # Create fictitious migration parameters   dplyr::mutate(     mig_sub = dplyr::case_when(       # Four regions with emigration, 1 region with immigration       spatial_unit == 1 ~ {         set.seed(1)         round(rnorm(1, mean = 0, sd = 0.2), digits = 4)       },       spatial_unit == 2 ~ {         set.seed(2)         round(rnorm(1, mean = 0, sd = 0.2), digits = 4)       },       spatial_unit == 3 ~ {         set.seed(25)         round(rnorm(1, mean = 0, sd = 0.2), digits = 4)       },       spatial_unit == 4 ~ {         set.seed(12)         round(rnorm(1, mean = 0, sd = 0.2), digits = 4)       },       TRUE ~ NA     )   ) |>   dplyr::mutate(     mig_sub = dplyr::case_when(       spatial_unit == 5 ~ 0 - sum(mig_sub, na.rm = TRUE), TRUE ~ mig_sub     ),     # check = sum(mig_sub, na.rm = TRUE),     .by = c(\"nat\", \"sex\", \"age\", \"year\", \"scen\")   ) |>   dplyr::select(     nat, sex, age, year, scen, spatial_unit, birthrate, int_mothers, mor,     emi_int, emi_nat, imm_int_n, imm_nat_n, acq, emi_nat_n, mig_nat_n, mig_sub   ) propop(   parameters = parameters_sub_mig |>      dplyr::filter(scen == \"reference\"),   year_first = 2024,   year_last = 2026,   age_groups = 101,   fert_first = 16,   fert_last = 50,   share_born_female = 100 / 205,   population = df_population,   binational = TRUE,   subregional = TRUE ) #> Running projection for: 1 (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> Running projection for: 2 (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> Running projection for: 3 (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> Running projection for: 4 (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> Running projection for: 5 (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #>  #> ── Settings used for the projection ──────────────────────────────────────────── #> Scenario(s): \"reference\" #> Year of starting population: 2023 #> Number of age groups: 101 #> Fertile period: 16-50 #> Share of female newborns: 0.488 #> Size of starting population: 726903 #> Projection period: 2024-2026 #> Nationality-specific projection: \"yes\" #> Subregional migration: \"yes\" #> ──────────────────────────────────────────────────────────────────────────────── #> Projected population size by 2026: #> - Scenario \"reference\": 751167 #> ════════════════════════════════════════════════════════════════════════════════ #> # A tibble: 6,060 × 18 #>     year scen  spatial_unit   age sex   nat   n_jan births   mor emi_int emi_nat #>    <dbl> <fct> <fct>        <dbl> <fct> <fct> <dbl>  <dbl> <dbl>   <dbl>   <dbl> #>  1  2024 refe… 1                0 m     ch        0   514. 1.85    0.626    4.38 #>  2  2024 refe… 1                1 m     ch      498     0  0.208   2.32    10.3  #>  3  2024 refe… 1                2 m     ch      534     0  0.207   2.31    11.8  #>  4  2024 refe… 1                3 m     ch      607     0  0.206   2.52    11.3  #>  5  2024 refe… 1                4 m     ch      581     0  0       2.31     9.24 #>  6  2024 refe… 1                5 m     ch      587     0  0       2.10     7.98 #>  7  2024 refe… 1                6 m     ch      584     0  0       2.10     6.93 #>  8  2024 refe… 1                7 m     ch      585     0  0       1.89     6.09 #>  9  2024 refe… 1                8 m     ch      572     0  0       1.68     5.04 #> 10  2024 refe… 1                9 m     ch      596     0  0       1.68     4.62 #> # ℹ 6,050 more rows #> # ℹ 7 more variables: imm_int <dbl>, imm_nat <dbl>, acq <dbl>, mig_sub <dbl>, #> #   n_dec <dbl>, delta_n <dbl>, delta_perc <dbl>"},{"path":"https://statistik-aargau.github.io/propop/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Norah Efosa. Author, maintainer. Adrian Gadient. Author. Tina Cornioley. Author. Jan Wunder. Author. Niklas Haffert. Author. Andrea Plüss. Contributor. Nadine Herrmann. Contributor. Lutz Benson. Contributor. Thomas Knecht. Contributor. Eric Meyer. Contributor. Statistik Aargau. Funder, copyright holder.","code":""},{"path":"https://statistik-aargau.github.io/propop/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Efosa N, Gadient , Cornioley T, Wunder J, Haffert N (2025). propop: Project Population Growth Switzerland using Cohort Component Method. https://github.com/statistik-aargau/propop.","code":"@Manual{,   title = {{propop}: Project Population Growth in Switzerland using the Cohort Component Method},   author = {Norah Efosa and Adrian Gadient and Tina Cornioley and Jan Wunder and Niklas Haffert},   year = {2025},   url = {https://github.com/statistik-aargau/propop}, }"},{"path":[]},{"path":"https://statistik-aargau.github.io/propop/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Project Population Growth in Switzerland using the Cohort Component Method","text":"goal propop create population projections using cohort component method (see e.g., Preston, Guillot, Heuveline, 2000; Statistik Aargau, 2025a; Statistik Aargau, 2025b). breakdown components, see vignette. package developed use projection scenarios Swiss Federal Statistical Office (FSO). current scenarios available years 2024-2055. starting population, can either use population data FSO population data. propop uses matrix calculation method FSO (2020; available French) therefore reveals almost identical results (see vignette Evaluate projections). package can used project development different demographic groups different scenarios different spatial levels (e.g., single canton municipalities within canton). package primarily designed use FSO input data (e.g., mortality rates), principle also work contexts (e.g., custom input data). However, important provide required input data specified form.","code":""},{"path":"https://statistik-aargau.github.io/propop/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Project Population Growth in Switzerland using the Cohort Component Method","text":"install current github version package, make sure devtools installed type:","code":"devtools::install_github(\"statistik-aargau/propop\")"},{"path":"https://statistik-aargau.github.io/propop/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Project Population Growth in Switzerland using the Cohort Component Method","text":"package includes four vignettes. Vignette 1 shows prepare FSO population data parameters. (Users can course use data parameters). Vignette 2 illustrates run population projections single region. Vignette 3 illustrates pepare run population projections subregions. Vignette 4 shows evaluate projections benchmarks.","code":""},{"path":"https://statistik-aargau.github.io/propop/index.html","id":"features-limitations-future-plans","dir":"","previous_headings":"","what":"Features, limitations, future plans","title":"Project Population Growth in Switzerland using the Cohort Component Method","text":"propop::propop() works either two nationalities (usually Swiss vs.  non-Swiss nationals) without distinguishing nationalities. However, propop::propop() currently requires 1-year age classes (0-100+) two genders. FSO projections published five-year intervals, recent ones based population records 2023. propop enables run projections recent population records. package developed use FSO parameters (e.g., mortality rate, emigration rate). parameters available cantons whole Switzerland. wish run projections smaller scales (e.g., districts), need prepare parameters spatial entity running projection. vignette includes tips prepare input data. Similarly, wish adjust parameters (e.g., mortality rates vary subregions), need prepare parameters accordingly. propop::propop()offers possibility account varying subregional migration patterns migration subregions. However, using feature, users must adjust calculate required parameters (see vignette). Custom parameters (e.g., consideration sub-cantonal spatial entities, adjustments reflect regional differences, addition subregional migration parameter) can passed parameters object propop::propop(). FSO uses additional ex-post adjustments ensure sums involving different cantons add , leads differences projections FSO propop. also possible future features increase accuracy projections. example, considering attractiveness municipalities planned housing developments help better explain population growth varies municipalities. interested contributing developments, please get touch package maintainer.","code":""},{"path":"https://statistik-aargau.github.io/propop/index.html","id":"quick-example","dir":"","previous_headings":"","what":"Quick example","title":"Project Population Growth in Switzerland using the Cohort Component Method","text":"run propop::propop() example data included package (canton Aargau), use following code:","code":"library(propop) projection_canton_2030 <- propop( parameters = fso_parameters, year_first = 2024, year_last = 2030, population = fso_population, subregional = FALSE, binational = TRUE)"},{"path":"https://statistik-aargau.github.io/propop/reference/aggregate_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate evaluation measures — aggregate_measures","title":"Aggregate evaluation measures — aggregate_measures","text":"Returns descriptive summary statistics model accuracy bias measures across demographic groups years. returned statistics particularly useful comparing model performance different groups different models.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/aggregate_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate evaluation measures — aggregate_measures","text":"","code":"aggregate_measures(data, weight_groups = NULL)"},{"path":"https://statistik-aargau.github.io/propop/reference/aggregate_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate evaluation measures — aggregate_measures","text":"data data frame created function compute_measures. weight_groups character, optional argument indicating one column names obtain evaluation criteria weighted specific groups (e.g., age groups, nationality).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/aggregate_measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate evaluation measures — aggregate_measures","text":"#' data frame. data frame includes following summary measures: mpe mean percentage error (mpe; mean algebraic percentage error malpe); bias indicator takes direction error account. Positive values indicate projections , overall, high. Negative values indicate projections , overall, low. closer value zero, lower bias. medpe median (middle value) percentage error (medpe). Particularly useful small samples skewed distributions. closer value zero, lower bias. mape mean absolute percentage / proportional error (mape). considers variance (amplitude) can seen measure precision. smaller value, lower average error. medape median (middle value) absolute percentage error (medape). Particularly useful small samples skewed distributions. smaller value, lower average error. rmse root mean square error; indication robustness quality projection. smaller value, robust projection. wmape weighted mean absolute percentage error (wmape); contrast mape, measure weights absolute percentage error according population size \"focal\" group (e.g., nationality, age group) thus considers domain size. Put differently, errors count populous groups less populous groups. measure particularly useful population sizes vary strongly. closer value, precise projection. n_measure number times summary measure occurs (per weight group requested). ape_under_1 measure gauge error distribution; indicates proportion observations absolute percentage errors smaller 1%. ape_under_5 measure gauge error distribution; indicates proportion observations absolute percentage errors smaller 5%.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/aggregate_measures.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Aggregate evaluation measures — aggregate_measures","text":"Baker, J., et al. (2015). Sub-county population estimates using administrative records: municipal-level case study New Mexico. M. N. Hoque & L. B. Potter (Eds.), Emerging techniques applied demography (pp. 63-79). Springer, https://doi.org/10.1007/978-94-017-8990-5_6 Bérard-Chagnon, J. (2015) Using tax data estimate number families households Canada. M. N. Hoque & L. B. Potter (Eds.), Emerging techniques applied demography (pp. 137-153). Springer, https://doi.org/10.1007/978-94-017-8990-5_10 Reinhold M. & Thomsen, S. L. (2015) Subnational population projections age: evaluation combined forecast techniques, Population Research Policy Review, 34, 593-613, https://doi.org/10.1007/s11113-015-9362-0 Wilson, T. (2012). Forecast accuracy uncertainty Australian Bureau Statistics state territory population projections, International Journal Population Research, 1, 419824, https://doi.org/10.1155/2012/419824 Wilson, T. (2016). Evaluation alternative cohort-component models local area population forecasts, Population Research Policy Review, 35, 241-261, https://doi.org/10.1007/s11113-015-9380-y","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/calculate_shares.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate shares for distributing people among subregions — calculate_shares","title":"Calculate shares for distributing people among subregions — calculate_shares","text":"Calculate shares distributing people among subregions","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/calculate_shares.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate shares for distributing people among subregions — calculate_shares","text":"","code":"calculate_shares(data, col, age_group = \"default\")"},{"path":"https://statistik-aargau.github.io/propop/reference/calculate_shares.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate shares for distributing people among subregions — calculate_shares","text":"data data frame, historical records (e.g., immigration cantons countries) aggregated across demographic groups. col character, name column contains data historical occurrences. age_group character (optional), either 1-year, 5-year, 10-year age group used basis calculating shares. argument specified, default attempts avoid age groups without observations. prioritizes age groups based resolution (1-year age groups = informative highest priority, 10-year age groups = least informative lowest priority). Users can override default enforce use specific age group demographic groups setting argument \"age_group_5\" \"age_group_10\".","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/calculate_shares.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate shares for distributing people among subregions — calculate_shares","text":"Returns input data frame following new columns: age_group_5: character, indicates 5-year age group 1-year age group assigned . age_group_10: character, indicates 10-year age group 1-year age group assigned . sum_5: numeric, total number people 5-year age group. prop_5: numeric, proportion 5-year age group total allocated 1-year age group. sum_10: numeric, total number people 10-year age group. prop_10: numeric, proportion 10-year age group total allocated 1-year age group. use_age_group: character, preference 1-year, 5-year, 10-year age group. Defaults age_group_1 least one observation recorded 5 years belonging respective 5-year age groups. n: numeric, number people used according use_age_group compute share. n_sum: numeric, total per demographic group across spatial units. share: numeric, spatial unit's share relative total people within demographic group (across spatial units; .e., n / n_sum).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/check_balance.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if population equation components add up within one year — check_balance","title":"Check if population equation components add up within one year — check_balance","text":"Function check components propop::propop() output add . Takes population beginning year (n_jan), adds components (births - mor - emi_int - emi_nat + imm_int + imm_nat + acq) checks sum equal population end year (n_dec).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/check_balance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if population equation components add up within one year — check_balance","text":"","code":"check_balance(data)"},{"path":"https://statistik-aargau.github.io/propop/reference/check_balance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if population equation components add up within one year — check_balance","text":"data data frame containing population projections; can created propop::propop().","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/check_balance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if population equation components add up within one year — check_balance","text":"data frame containing summary statistics.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/check_balance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if population equation components add up within one year — check_balance","text":"","code":"propop(   parameters = fso_parameters,   year_first = 2024,   year_last = 2027,   population = fso_population,   subregional = FALSE,   binational = TRUE ) |>   check_balance() #> Running projection for: Aargau (Scenario: high) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> ✔ Year: 2027 #> Running projection for: Aargau (Scenario: low) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> ✔ Year: 2027 #> Running projection for: Aargau (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> ✔ Year: 2027 #>  #> ── Settings used for the projection ──────────────────────────────────────────── #> Scenario(s): \"high\", \"low\", and \"reference\" #> Year of starting population: 2023 #> Number of age groups: 101 #> Fertile period: 16-50 #> Share of female newborns: 0.488 #> Size of starting population: 726894 #> Projection period: 2024-2027 #> Nationality-specific projection: \"yes\" #> Subregional migration: \"no\" #> ──────────────────────────────────────────────────────────────────────────────── #> Projected population size by 2027: #> - Scenario \"high\": 768888 #> - Scenario \"low\": 748703 #> - Scenario \"reference\": 758993 #> ════════════════════════════════════════════════════════════════════════════════ #>  #> ── Result of population equation components check ────────────────────────────── #> ℹ Total rows checked: 4848 #> ✔ Check passed: Equations in all rows add up and there are no missing values."},{"path":"https://statistik-aargau.github.io/propop/reference/compute_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute evaluation measures — compute_measures","title":"Compute evaluation measures — compute_measures","text":"Uses differences results projection benchmark compute performance measures.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/compute_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute evaluation measures — compute_measures","text":"","code":"compute_measures(combined, weight_groups = NULL)"},{"path":"https://statistik-aargau.github.io/propop/reference/compute_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute evaluation measures — compute_measures","text":"combined data frame created propop::prepare_evaluation(). weight_groups character, optional argument indicating one column names obtain evaluation criteria weighted specific groups (e.g., age groups, nationality).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/compute_measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute evaluation measures — compute_measures","text":"data frame. following evaluation criteria can directly interpreted used descriptive comparisons: error forecast error; quantifies level -projection (negative values) -projection (positive values) relative benchmark n_benchmark. pe percentage error expresses - / -projection percent benchmark n_benchmark. ape absolute percentage error; absolute deviation percent benchmark n_benchmark, thus showing extent error direction. w_ape weighted absolute percentage error; weighs absolute percentage error according population size focal group (e.g., nationality, age group). weighted version useful aggregated measure groups vary strongly terms population size. returned argument weight_groups contains least one grouping variable. following helper variables used compute aggregate measures. returned weight groups provided via argument weight_groups. n_tot total number people (.e., sum number people demographic groups); used compute weighted absolute percentage error. group_tot number people focal group; used compute weighted absolute percentage error. weight share (optional) focal group (e.g., municipality type / size, nationality, age group) relative people; used compute weighted absolute percentage error.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/compute_measures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute evaluation measures — compute_measures","text":"input data frame created propop::prepare_evaluation(). includes benchmark (typically observed population records, .e., number people per spatial unit, demographic group, year) corresponding projected number people. input can range low resolution (e.g., total number people per municipality) high resolution (e.g., 101 age classes, nationality, sex). details usage, see vignette(\"evaluate\", package = \"propop\").","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/compute_measures.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute evaluation measures — compute_measures","text":"Baker, J., et al. (2015). Sub-county population estimates using administrative records: municipal-level case study New Mexico. M. N. Hoque & L. B. Potter (Eds.), Emerging techniques applied demography (pp. 63-79). Springer, https://doi.org/10.1007/978-94-017-8990-5_6 Wilson, T. (2012). Forecast accuracy uncertainty Australian Bureau Statistics state territory population projections, International Journal Population Research, 1, 419824, https://doi.org/10.1155/2012/419824 Wilson, T. (2016). Evaluation alternative cohort-component models local area population forecasts, Population Research Policy Review, 35, 241-261, https://doi.org/10.1007/s11113-015-9380-y","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/compute_measures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute evaluation measures — compute_measures","text":"","code":"if (FALSE) { # \\dontrun{ # Get evaluation measures without weights compute_measures(combined) # Get evaluation measures weighted for groups compute_measures(combined, weight_groups = c(\"age\", \"nat\")) } # }"},{"path":"https://statistik-aargau.github.io/propop/reference/fso_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample parameters to run population projection — fso_parameters","title":"Sample parameters to run population projection — fso_parameters","text":"Data frame containing rates number people Federal Statistical Office (FSO) required project development four demographic groups selected canton (Aargau). parameters model published 2025. sample data include three scenarios years 2024-2055.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample parameters to run population projection — fso_parameters","text":"","code":"fso_parameters"},{"path":"https://statistik-aargau.github.io/propop/reference/fso_parameters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample parameters to run population projection — fso_parameters","text":"example data include required parameters demographic group (nationality (2) X sex (2) X age classes (101)) years 2024-2055.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_parameters.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample parameters to run population projection — fso_parameters","text":"Data obtained Swiss Federal Statistical Office (FSO): https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_101/-/px-x-0104020000_101.px/ https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_102/-/px-x-0104020000_102.px https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_103/-/px-x-0104020000_103.px/ https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_106/-/px-x-0104020000_106.px/ https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_109/-/px-x-0104020000_109.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_parameters.html","id":"demographic-groups","dir":"Reference","previous_headings":"","what":"Demographic groups","title":"Sample parameters to run population projection — fso_parameters","text":"returned data frame includes parameters unique combination following demographic variables: nat: ch = Swiss; int = foreign / international. sex: f = female, m = male. age: 101 one-year age classes, ranging 0 100 (including older 100).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_parameters.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Sample parameters to run population projection — fso_parameters","text":"following parameters included returned data frame: start_n: numeric, number people corresponding demographic group 1st January. year: numeric, year projection. scen: character, projection scenario. spatial_unit: character, indicating user requested spatial unit(s). birthrate: numeric, total number live human births per 1,000 inhabitants. (formerly birth_rate). int_mothers: numeric, proportion children Swiss nationality born non-Swiss mothers (formerly births_int_ch). mor: numeric, prospective mortality (probability death). emi_int: numeric, rate people emigrating countries (formerly emi). emi_nat: numeric, rate people emigrating cantons (new parameter). acq: numeric, rate acquisition Swiss citizenship. imm_int_n: numeric, number people immigrating abroad (formelry imm_int). imm_nat_n: numeric, number people immigrating cantons (new parameter). emi_nat_n: numeric, number people emigrating cantons (parameter previously used compute mig_nat_n). mig_nat_n: numeric, national / inter-cantonal net migration (number immigrants minus number emigrants). (formerly mig_ch, soon obsolete removed).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_parameters.html","id":"details-about-calculated-variables","dir":"Reference","previous_headings":"","what":"Details about calculated variables","title":"Sample parameters to run population projection — fso_parameters","text":"births_int_ch calculated dividing number live newborns Swiss citizenship born non-Swiss mothers number live newborns born non-Swiss mothers. mig_ch calculated difference immigration cantons emigration cantons.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample population data from the Federal Statistical Office — fso_population","title":"Sample population data from the Federal Statistical Office — fso_population","text":"Example data frame containing starting population required project development four demographic groups selected canton (Aargau). Population data can downloaded FSO using get_population. time release {propop} v1.3 May 2025, recent data available via get_population 2023.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample population data from the Federal Statistical Office — fso_population","text":"","code":"fso_population"},{"path":"https://statistik-aargau.github.io/propop/reference/fso_population.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample population data from the Federal Statistical Office — fso_population","text":"example population records include number people demographic group (nationality (2) X sex (2) X age classes (101)) canton Aargau 2023.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_population.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample population data from the Federal Statistical Office — fso_population","text":"Federal Statistical Office: https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0102010000_101/-/px-x-0102010000_101.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/fso_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample population data from the Federal Statistical Office — fso_population","text":"data frame. four demographic groups (female / male, Swiss / foreign nationals), 101 age classes, resulting total 404 rows per requested year spatial unit. Columns included returned data frame: year numeric, year population recorded. spatial_unit character, indicating spatial entities (e.g., cantons, districts, municipalities). nat character, ch = Swiss, int = foreign / international. sex character f = female, m = male. age numeric, 101 one-year age classes, ranging 0 100 (including older 100). n numeric, number people per year, spatial entity, demographic group.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get projection parameters from FSO — get_parameters","title":"Get projection parameters from FSO — get_parameters","text":"Users mandatory projection parameters propop::propop() can use convenience function download Federal Statistical Office (FSO). parameters available level cantons. smaller-scale projections, parameters must scaled . addition parameters, function also returns projected population (.e., number people estimated FSO model released 2025). parameters projections FSO model published 2025. parameters available years 2024-2055. variables int_mothers mig_nat_n directly available FSO. calculated within function. get projection parameters, must use spelling defined corresponding FSO table. See vignette(\"prepare_data\", package = \"propop\"). Inspecting column 'valueTexts' following package data may also help: data('stattab_101_snap') data('stattab_102_snap') data('stattab_103_snap') data('stattab_106_snap') data('stattab_109_snap') Changes API interface may break function. problems occur, recommend following step--step procedure described vignette(\"prepare_data\", package = \"propop\").","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get projection parameters from FSO — get_parameters","text":"","code":"get_parameters(   number_fso_ref = \"px-x-0104020000_101\",   number_fso_high = \"px-x-0104020000_102\",   number_fso_low = \"px-x-0104020000_103\",   number_fso_rates = \"px-x-0104020000_109\",   number_fso_births = \"px-x-0104020000_106\",   year_first,   year_last,   spatial_units )"},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get projection parameters from FSO — get_parameters","text":"Data obtained Swiss Federal Statistical Office (FSO): https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_101/-/px-x-0104020000_101.px/ https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_102/-/px-x-0104020000_102.px https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_103/-/px-x-0104020000_103.px/ https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_106/-/px-x-0104020000_106.px/ https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_109/-/px-x-0104020000_109.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get projection parameters from FSO — get_parameters","text":"number_fso_ref character, px-x table ID number parameters (reference scenario), defaults \"px-x-0104020000_101\". number_fso_high character, px-x table ID number parameters (high growth scenario), defaults \"px-x-0104020000_102\". number_fso_low character, px-x table ID number parameters (low growth scenario, defaults \"px-x-0104020000_103\". number_fso_rates character, px-x table ID rate parameters, defaults \"px-x-0104020000_109\". number_fso_births character, px-x table ID required compute share Swiss newborns non-Swiss mothers, defaults \"px-x-0104020000_106\". year_first numeric,  first year parameters projections downloaded. year_last numeric, last year parameters projections downloaded. spatial_units character vector, indicating least one spatial entity projection run. Typically canton.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get projection parameters from FSO — get_parameters","text":"data frame rates number people Federal Statistical Office (FSO) required project population development requested spatial entities. four demographic groups (nationality x sex), 101 age classes, resulting total 404 rows per requested year spatial unit.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"demographic-groups","dir":"Reference","previous_headings":"","what":"Demographic groups","title":"Get projection parameters from FSO — get_parameters","text":"returned data frame includes parameters unique combination following demographic variables: nat: ch = Swiss; int = foreign / international. sex: f = female, m = male. age: 101 one-year age classes, ranging 0 100 (including older 100).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Get projection parameters from FSO — get_parameters","text":"following parameters included returned data frame: start_n: numeric, number people corresponding demographic group 1st January. year: numeric, year projection. scen: character, projection scenario. spatial_unit: character, indicating user requested spatial unit(s). birthrate: numeric, total number live human births per 1,000 inhabitants. (formerly birth_rate). int_mothers: numeric, proportion children Swiss nationality born non-Swiss mothers (formerly births_int_ch). mor: numeric, prospective mortality (probability death). emi_int: numeric, rate people emigrating countries (formerly emi). emi_nat: numeric, rate people emigrating cantons (new parameter). acq: numeric, rate acquisition Swiss citizenship. imm_int_n: numeric, number people immigrating abroad (formelry imm_int). imm_nat_n: numeric, number people immigrating cantons (new parameter). emi_nat_n: numeric, number people emigrating cantons (parameter previously used compute mig_nat_n). mig_nat_n: numeric, national / inter-cantonal net migration (number immigrants minus number emigrants). (formerly mig_ch, soon obsolete removed).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"projected-population","dir":"Reference","previous_headings":"","what":"Projected population","title":"Get projection parameters from FSO — get_parameters","text":"n_projected number people per demographic group year December 31 (projected FSO 2025 model).","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"details-about-calculated-variables","dir":"Reference","previous_headings":"","what":"Details about calculated variables","title":"Get projection parameters from FSO — get_parameters","text":"births_int_ch calculated dividing number live newborns Swiss citizenship born non-Swiss mothers number live newborns born non-Swiss mothers. mig_ch calculated difference immigration cantons emigration cantons.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get projection parameters from FSO — get_parameters","text":"","code":"if (FALSE) { # (Sys.getenv(\"RUN_EXPENSIVE_TESTS\") == \"true\") if (FALSE) { # \\dontrun{ one_canton <- get_parameters(   year_first = 2024,   year_last = 2055,   spatial_units = \"Aargau\" ) two_cantons_4years <- get_parameters(   year_first = 2025,   year_last = 2028,   spatial_units = c(\"Aargau\", \"Zug\") ) } # } }"},{"path":"https://statistik-aargau.github.io/propop/reference/get_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Get population data from FSO — get_population","title":"Get population data from FSO — get_population","text":"Users required population data can use convenience function get mandatory starting population propop::propop() Federal Statistical Office (FSO). function can also used obtain population records several years (e.g., model performance evaluations). function can used obtain data various spatial levels (e.g., cantons, municipalities). recent data usually 6 18 months old. get population data, must use spelling defined corresponding FSO table (STATTAB cube px-x-0102010000_101). Inspecting column 'valueTexts' following package data may also help: data('stattab_pop_snap'). Changes API interface may break function.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get population data from FSO — get_population","text":"","code":"get_population(   number_fso = \"px-x-0102010000_101\",   year,   year_last = NULL,   spatial_units )"},{"path":"https://statistik-aargau.github.io/propop/reference/get_population.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get population data from FSO — get_population","text":"Federal Statistical Office: https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0102010000_101/-/px-x-0102010000_101.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get population data from FSO — get_population","text":"number_fso character, px-x table ID population records, defaults px-x-0102010000_101. year numeric, year population records downloaded. usually starting population. download longer time periods, use year indicate first year period. year_last numeric (optional); specifies final year time period data downloaded. spatial_units character vector, indicating least one spatial entity projection run. Typically canton, several districts municipalities.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get population data from FSO — get_population","text":"data frame. four demographic groups (female / male, Swiss / foreign nationals), 101 age classes, resulting total 404 rows per requested year spatial unit. Columns included returned data frame: year numeric, year population recorded. spatial_unit character, indicating spatial entities (e.g., cantons, districts, municipalities). nat character, ch = Swiss, int = foreign / international. sex character f = female, m = male. age numeric, 101 one-year age classes, ranging 0 100 (including older 100). n numeric, number people per year, spatial entity, demographic group.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/get_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get population data from FSO — get_population","text":"","code":"if (FALSE) { # (Sys.getenv(\"RUN_EXPENSIVE_TESTS\") == \"true\") if (FALSE) { # \\dontrun{ get_population(   number_fso = \"px-x-0102010000_101\",   year = 2020,   year_last = 2023,   spatial_units = \"- Aargau\" ) get_population(   year = 2023,   spatial_units = c(\"- Aargau\", \"......0301 Aarberg\") ) } # } }"},{"path":"https://statistik-aargau.github.io/propop/reference/prepare_evaluation.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for evaluation — prepare_evaluation","title":"Prepare data for evaluation — prepare_evaluation","text":"Takes population projections benchmark data (typically population records) prepares combined data frame evaluate performance projection. details usage, see vignette(\"evaluate\", package = \"propop\").","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/prepare_evaluation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for evaluation — prepare_evaluation","text":"","code":"prepare_evaluation(   data_benchmark,   n_benchmark,   data_projected,   n_projected,   age_groups = NULL )"},{"path":"https://statistik-aargau.github.io/propop/reference/prepare_evaluation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for evaluation — prepare_evaluation","text":"data_benchmark data frame containing benchmark data (e.g., actual / official population records obtained propop::get_population()). n_benchmark numeric column containing benchmark population demographic group. data_projected data frame containing population projections; can created propop::propop(). n_projected numeric column containing projected size demographic group. age_groups character, optional argument options \"age_groups_3\" \"age_groups_5\". option \"age_groups_3\" groups data three age ranges (0-19, 20-64, 65 years older). option \"age_groups_5\" groups data five age ranges (0-19, 20-39, 40-59, 60-79, 80 years older). Using aggregated groups lead smaller projection errors using 101 age classes. Defaults using 101 one-year age classes option chosen.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/prepare_evaluation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for evaluation — prepare_evaluation","text":"Returns data frame number people benchmark projection. row contains unique combination year, spatial unit, demographic group.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/prepare_evaluation.html","id":"input-data-and-variables","dir":"Reference","previous_headings":"","what":"Input data and variables","title":"Prepare data for evaluation — prepare_evaluation","text":"input data frames must contain following variables range years: year character, year population recorded. spatial_unit character, indicating spatial entities (e.g., cantons, districts, municipalities). nat character, ch = Swiss, int = foreign / international. sex character, f = female, m = male. age numeric, 101 one-year age classes, ranging 0 100 (including older 100). n numeric, number people per year, spatial entity, demographic group.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/prepare_evaluation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for evaluation — prepare_evaluation","text":"","code":"if (FALSE) { # \\dontrun{ combined <- prepare_evaluation(   data_benchmark = output_get_population,   data_projected = output_propop ) combined_grouped <- prepare_evaluation(   data_benchmark = output_get_population,   data_projected = output_propop,   age_groups = \"age_groups_3\" ) } # }"},{"path":"https://statistik-aargau.github.io/propop/reference/project_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Project population development (raw results) — project_raw","title":"Project population development (raw results) — project_raw","text":"Core function uses cohort component method matrix algebra project population development (details, see ). function can used different spatial levels (e.g., cantons, municipalities) one scenario time. function provides projections raw version key information missing (e.g., age groups rows represent). conveniently obtain enriched, informative output, use wrapper function propop::propop() (internally uses propop::project_raw()). parameters starting populations different spatial levels can obtained Swiss Federal Statistical Office (FSO). instructions download information STAT-TAB, see vignette(\"prepare_data\", package = \"propop\"). projection parameters need passed single data frame project_raw (parameters columns). column types, names, factor levels need match specified . 'cohort component method' implemented matrices enhance performance enable efficient code execution. nutshell, starting population ('n') multiplied survival rate obtain people transition projected next year (year + 1). , absolute number people immigrating cantons countries added \"surviving\" population. results starting population projecting next year. Newborn children added separately new starting population year. starting population clustered 404 groups: 101 age groups times two nationalities times 2 genders. survival rate calculated function 'create_transition_matrix()' resulting matrix 'L'. use rates mortality, emigration towards countries outside Switzerland, emigration cantons rate acquisition Swiss citizenship foreign population calculate survival rates. optional distribution population subregions within canton, add absolute migration balance (German = 'saldo') (immigration + emigration) afterwards. Steps function: Checks: Checking input data parameter settings correct formats. Data preparation: Preparing vectors, example, projection time frame creation empty vectors filled data later . Loop years calculating projections Subsetting parameters: Depending selected projection year demographic unit, parameters mortality, fertility, acquisition Swiss citizenship well migration parameters subset demographic group. Create matrices: Matrices built survival rate, mortality, fertility calculating number newborn babies. Creating vectors: Vectors built mortality migration parameters. Projection: transition matrix 'L' multiplied starting population next year. Migrating people added absolute numbers. People 100 years old older clustered one age group (age = 100+). newborn babies added resulting starting population next projection year taking account survival rates. Aggregating data: projected years aggregated one data frame. function 'propop()', function contained, automatically adds relevant meta data results.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/project_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project population development (raw results) — project_raw","text":"","code":"project_raw(   parameters,   year_first,   year_last,   age_groups = 101,   fert_first = 16,   fert_last = 50,   share_born_female = 100/205,   n,   subregional )"},{"path":"https://statistik-aargau.github.io/propop/reference/project_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project population development (raw results) — project_raw","text":"parameters data frame containing FSO rates numbers run projection specific spatial level (e.g., canton, municipality). year: projection year. spatial_unit: ID spatial entity (e.g., canton, municipality) run projections. scen: projection scenario, used subset data frames multiple scenarios (r = reference, l = low growth, h = high growth scenario). nat: nationality (ch = Swiss; int = foreign / international). sex: sex (f = female, m = male). age: age classes; typically ranging 0 100 (incl. >100). birthrate: numeric, total number live human births per 1,000 inhabitants. int_mothers proportion children Swiss nationality born non-Swiss mothers. mor: prospective mortality rate (probability death). acq: rate acquisition Swiss citizenship. emi_int: rate people emigrating abroad. emi_nat: rate people emigrating cantons. imm_int_n: number people immigrating abroad. imm_nat_n: number people immigrating cantons. mig_sub: within canton net migration. Useful account movements different subregions (e.g., municipalities). argument optional. year_first numeric, first year projected. year_last numeric, last year projected. age_groups numeric, number age classes. Creates vector 1-year age classes running 0 (age_groups - 1). Defaults 101 (FSO standard number age groups). fert_first numeric, first year female fertility. Defaults 16 (FSO standard value). fert_last numeric, last year female fertility. Defaults 50 (FSO standard value). share_born_female numeric, fraction female babies. Defaults 100 / 205 (FSO standard value). n number people per demographic group year; year year_first. Typically extracted data frame created propop::get_population(). subregional boolean, TRUE indicates subregional migration patterns (e.g., movement municipalities within canton) part projection.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/project_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project population development (raw results) — project_raw","text":"Returns unformatted unlabeled data frame. includes number people demographic group per year (starting year projected years. number rows corresponds product years demographic groups (e.g., nationality (2) X sex (2) X age groups (101) = 404). Variables included output: scen projected scenarios. spatial_unit spatial unit projection run (e.g., canton, district, municipality). N number people per demographic group. IMM_INT number immigrants countries. MIG_NAT number people migrating / superordinate spatial units (typically cantons). MIG_SUB number migrants within superordinate spatial unit (typically canton). MOR number deaths (among people older 0). EMI_INT number emigrants countries. ACQ number foreigners acquire Swiss citizenship (naturalisations). BIRTHS number births.","code":""},{"path":[]},{"path":"https://statistik-aargau.github.io/propop/reference/project_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project population development (raw results) — project_raw","text":"","code":"# load package data data(fso_parameters) data(fso_population)  # run projection project_raw(   parameters = fso_parameters |>  dplyr::filter(scen == \"reference\"),   year_first = 2025,   year_last = 2026,   n = fso_population |> dplyr::pull(n),   subregional = FALSE ) |>   head(10) #> Running projection for: Aargau (Scenario: reference) #> ✔ Year: 2025 #> ✔ Year: 2026 #>         scen spatial_unit    N   BIRTHS       MOR   EMI_INT  EMI_NAT IMM_INT #> 1  reference       Aargau 2371 2467.882 8.0133597  4.007841 22.04313       5 #> 2  reference       Aargau 2542    0.000 0.9568541 10.513014 48.73828      17 #> 3  reference       Aargau 2891    0.000 1.0356512 11.403412 55.98247      16 #> 4  reference       Aargau 2766    0.000 1.0947324 12.254949 54.58786      16 #> 5  reference       Aargau 2794    0.000 0.0000000 11.310174 44.29472      15 #> 6  reference       Aargau 2782    0.000 0.0000000  9.963404 38.86175      14 #> 7  reference       Aargau 2787    0.000 0.0000000  9.839934 33.45911      14 #> 8  reference       Aargau 2726    0.000 0.0000000  8.912826 28.72282      13 #> 9  reference       Aargau 2837    0.000 0.0000000  7.744566 24.20143      12 #> 10 reference       Aargau 2866    0.000 0.0000000  8.224463 21.58673      11 #>    IMM_NAT ACQ MIG_SUB #> 1       51   0       0 #> 2       94   0       0 #> 3       84   0       0 #> 4       73   0       0 #> 5       64   0       0 #> 6       50   0       0 #> 7       41   0       0 #> 8       34   0       0 #> 9       30   0       0 #> 10      26   0       0"},{"path":"https://statistik-aargau.github.io/propop/reference/propop-package.html","id":null,"dir":"Reference","previous_headings":"","what":"propop: Project Population Growth in Switzerland using the Cohort Component Method — propop-package","title":"propop: Project Population Growth in Switzerland using the Cohort Component Method — propop-package","text":"purpose package project development population different spatial levels (e.g., cantons, districts, municipalities) using cohort component method parameters provided Federal Statistical Office (FSO).","code":""},{"path":[]},{"path":"https://statistik-aargau.github.io/propop/reference/propop-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"propop: Project Population Growth in Switzerland using the Cohort Component Method — propop-package","text":"Maintainer: Norah Efosa norah.efosa@ag.ch Authors: Adrian Gadient adrian.gadient@ag.ch (ORCID) Tina Cornioley tina.cornioley@vd.ch Jan Wunder jan.wunder@sg.ch Niklas Haffert niklas.haffert@sg.ch contributors: Andrea Plüss andrea.pluess@ag.ch [contributor] Nadine Herrmann [contributor] Lutz Benson [contributor] Thomas Knecht [contributor] Eric Meyer [contributor] Statistik Aargau [funder, copyright holder]","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/propop.html","id":null,"dir":"Reference","previous_headings":"","what":"Project population development — propop","title":"Project population development — propop","text":"Wrapper function project population development using cohort component method (see e.g., details). function calls project_raw.R, uses matrix algebra implement demographic balancing equations. can either use parameters starting population download data Swiss Federal Statistical Office (FSO). instructions download information STAT-TAB, see vignette(\"prepare_data\", package = \"propop\"). projection parameters need passed propop::propop() single data frame (parameters columns). column types, names, factor levels need match specifications listed parameters. nothing else indicated argument scenarios, propop() runs returns scenarios provided via parameters. details use function project population development level canton, see vignette(\"project_single_region\", package = \"propop\").","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/propop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project population development — propop","text":"","code":"propop(   parameters,   population,   year_first,   year_last,   scenarios = NULL,   age_groups = 101,   fert_first = 16,   fert_last = 50,   share_born_female = 100/205,   subregional = FALSE,   binational = TRUE,   spatial_unit = \"spatial_unit\" )"},{"path":"https://statistik-aargau.github.io/propop/reference/propop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project population development — propop","text":"parameters data frame containing FSO rates numbers run projection specific spatial level (e.g., canton, municipality). year, character, projection year. spatial_unit, character, ID spatial entity (e.g., canton, municipality) run projections. scen, character, one several projection scenario(s). main scenarios usually \"reference\", \"low\" growth, \"high\" growth. nat, character, nationality (ch = Swiss; int = foreign / international). Required binational = TRUE. sex, character (f = female, m = male). age, numeric, typically ranging 0 100 (incl. >100). birthrate, numeric, number births per mother int_mothers, numeric, proportion children Swiss nationality born non-Swiss mothers. Required binational = TRUE. mor, numeric, prospective mortality rate (probability death). acq, numeric, rate acquisition Swiss citizenship. Required binational = TRUE. emi_int, numeric, rate people emigrating abroad (number immigrants - number emigrants). emi_nat, rate people emigrating cantons. imm_int_n, numeric, number people immigrating abroad. imm_nat_n, numeric, number people immigrating cantons. mig_sub (optional), numeric, net migration per subregion; migration / subregions (e.g., municipalities, districts) within main superordinate projection unit (e.g., canton). Accounts movements different subregions. Needs provided user. population data frame including starting population demographic group spatial unit. Possible values parameters (apart year). data frame includes one year, usually one preceding first year projection. year character, year_first - 1. spatial_unit character. nat character. sex character. age numeric. n numeric, number people per demographic group. year_first numeric, first year projected. year_last numeric, last year projected. scenarios (optional), character, indicating projection scenario(s) shall run; corresponding information must available parameters. Defaults values variable scen parameters. age_groups numeric, number age classes. Creates vector 1-year age classes running 0 (age_groups - 1). Must currently set = 101 (FSO standard number age groups). fert_first numeric, first year female fertility. Defaults 16 (FSO standard value). fert_last numeric, last year female fertility. Defaults 50 (FSO standard value). share_born_female numeric, fraction female babies. Defaults 100 / 205 (FSO standard value). subregional boolean, TRUE indicates subregional migration patterns (e.g., movement municipalities within canton) part projection. Requires input level subregions (parameters population). binational boolean, TRUE indicates projections discriminate two groups nationalities. FALSE indicates projection run without distinguishing nationalities. spatial_unit character, name variable containing names region subregions projection shall performed.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/propop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project population development — propop","text":"Returns data frame includes number people demographic group per year (projected years) spatial unit. number rows product scenarios times years times demographic groups times spatial units. output includes several identifiers indicate scenario, demographic group, year, spatial unit results rows refer : year integer, indicating projected years. scen character, indicating projected scenario(s). spatial_unit factor, spatial units projection run (e.g., canton, districts, municipalities). age integer, ranging 0n 100 years (including older 100). sex factor, female (f) male (m). nat factor, indicates nationality Swiss (ch) international / foreign (int). variable returned binational = TRUE. output also includes columns related size change population: n_jan numric, start--year population per demographic group. n_dec numeric, end--year population per demographic group. delta_n numeric, population change per demographic group start end year absolute numbers. delta_perc numeric, population change per demographic group start end year percentages. components used project development population also included output: births numeric, number births (non-zero values available age = 0). mor numeric, number deaths. emi_int numeric, number people emigrate countries. emi_nat numeric, number people emigrate cantons. imm_int numeric, number people immigrate countries. imm_nat numeric, number people immigrate cantons. acq numeric, number people acquire Swiss citizenship (returned  binational = TRUE.)","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/propop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project population development — propop","text":"","code":"# Run projection for the sample data (whole canton of Aargau) propop(   parameters = fso_parameters,   year_first = 2024,   year_last = 2027,   population = fso_population,   subregional = FALSE,   binational = TRUE ) #> Running projection for: Aargau (Scenario: high) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> ✔ Year: 2027 #> Running projection for: Aargau (Scenario: low) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> ✔ Year: 2027 #> Running projection for: Aargau (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> ✔ Year: 2027 #>  #> ── Settings used for the projection ──────────────────────────────────────────── #> Scenario(s): \"high\", \"low\", and \"reference\" #> Year of starting population: 2023 #> Number of age groups: 101 #> Fertile period: 16-50 #> Share of female newborns: 0.488 #> Size of starting population: 726894 #> Projection period: 2024-2027 #> Nationality-specific projection: \"yes\" #> Subregional migration: \"no\" #> ──────────────────────────────────────────────────────────────────────────────── #> Projected population size by 2027: #> - Scenario \"high\": 768888 #> - Scenario \"low\": 748703 #> - Scenario \"reference\": 758993 #> ════════════════════════════════════════════════════════════════════════════════ #> # A tibble: 4,848 × 17 #>     year scen  spatial_unit   age sex   nat   n_jan births   mor emi_int emi_nat #>    <dbl> <fct> <fct>        <dbl> <fct> <fct> <dbl>  <dbl> <dbl>   <dbl>   <dbl> #>  1  2024 high  Aargau           0 m     ch        0  2633. 9.00     6.00    21.0 #>  2  2024 high  Aargau           1 m     ch     2371     0  1.00    13.0     49.1 #>  3  2024 high  Aargau           2 m     ch     2542     0  0.998   13.0     56.0 #>  4  2024 high  Aargau           3 m     ch     2891     0  0.983   14.0     54.0 #>  5  2024 high  Aargau           4 m     ch     2766     0  0       13.0     44.0 #>  6  2024 high  Aargau           5 m     ch     2794     0  0       12.0     38.0 #>  7  2024 high  Aargau           6 m     ch     2782     0  0       11.0     33.0 #>  8  2024 high  Aargau           7 m     ch     2787     0  0       10.0     29.0 #>  9  2024 high  Aargau           8 m     ch     2726     0  0        9.00    24.0 #> 10  2024 high  Aargau           9 m     ch     2837     0  0        9.00    22.0 #> # ℹ 4,838 more rows #> # ℹ 6 more variables: imm_int <dbl>, imm_nat <dbl>, acq <dbl>, n_dec <dbl>, #> #   delta_n <dbl>, delta_perc <dbl> propop(   parameters = fso_parameters |>     dplyr::filter(scen == \"reference\" | scen == \"high\"),   year_first = 2024,   year_last = 2026,   scenarios = c(\"reference\", \"high\"),   population = fso_population,   subregional = FALSE,   binational = TRUE ) #> Running projection for: Aargau (Scenario: high) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #> Running projection for: Aargau (Scenario: reference) #> ✔ Year: 2024 #> ✔ Year: 2025 #> ✔ Year: 2026 #>  #> ── Settings used for the projection ──────────────────────────────────────────── #> Scenario(s): \"high\" and \"reference\" #> Year of starting population: 2023 #> Number of age groups: 101 #> Fertile period: 16-50 #> Share of female newborns: 0.488 #> Size of starting population: 726894 #> Projection period: 2024-2026 #> Nationality-specific projection: \"yes\" #> Subregional migration: \"no\" #> ──────────────────────────────────────────────────────────────────────────────── #> Projected population size by 2026: #> - Scenario \"high\": 758421 #> - Scenario \"reference\": 751159 #> ════════════════════════════════════════════════════════════════════════════════ #> # A tibble: 2,424 × 17 #>     year scen  spatial_unit   age sex   nat   n_jan births   mor emi_int emi_nat #>    <dbl> <fct> <fct>        <dbl> <fct> <fct> <dbl>  <dbl> <dbl>   <dbl>   <dbl> #>  1  2024 high  Aargau           0 m     ch        0  2633. 9.00     6.00    21.0 #>  2  2024 high  Aargau           1 m     ch     2371     0  1.00    13.0     49.1 #>  3  2024 high  Aargau           2 m     ch     2542     0  0.998   13.0     56.0 #>  4  2024 high  Aargau           3 m     ch     2891     0  0.983   14.0     54.0 #>  5  2024 high  Aargau           4 m     ch     2766     0  0       13.0     44.0 #>  6  2024 high  Aargau           5 m     ch     2794     0  0       12.0     38.0 #>  7  2024 high  Aargau           6 m     ch     2782     0  0       11.0     33.0 #>  8  2024 high  Aargau           7 m     ch     2787     0  0       10.0     29.0 #>  9  2024 high  Aargau           8 m     ch     2726     0  0        9.00    24.0 #> 10  2024 high  Aargau           9 m     ch     2837     0  0        9.00    22.0 #> # ℹ 2,414 more rows #> # ℹ 6 more variables: imm_int <dbl>, imm_nat <dbl>, acq <dbl>, n_dec <dbl>, #> #   delta_n <dbl>, delta_perc <dbl>"},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_101_snap.html","id":null,"dir":"Reference","previous_headings":"","what":"Snapshot of STAT-TAB px 101 — stattab_101_snap","title":"Snapshot of STAT-TAB px 101 — stattab_101_snap","text":"Used tests make easier users look spelling used STAT-TAB.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_101_snap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snapshot of STAT-TAB px 101 — stattab_101_snap","text":"","code":"stattab_101_snap"},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_101_snap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Snapshot of STAT-TAB px 101 — stattab_101_snap","text":"object class tbl_df (inherits tbl, data.frame) 177 rows 6 columns.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_101_snap.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Snapshot of STAT-TAB px 101 — stattab_101_snap","text":"Data obtained Swiss Federal Statistical Office (FSO): https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_101/-/px-x-0104020000_101.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_102_snap.html","id":null,"dir":"Reference","previous_headings":"","what":"Snapshot of STAT-TAB px 102 — stattab_102_snap","title":"Snapshot of STAT-TAB px 102 — stattab_102_snap","text":"Used tests make easier users look spelling used STAT-TAB.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_102_snap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snapshot of STAT-TAB px 102 — stattab_102_snap","text":"","code":"stattab_102_snap"},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_102_snap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Snapshot of STAT-TAB px 102 — stattab_102_snap","text":"object class tbl_df (inherits tbl, data.frame) 177 rows 6 columns.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_102_snap.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Snapshot of STAT-TAB px 102 — stattab_102_snap","text":"Data obtained Swiss Federal Statistical Office (FSO): https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_102/-/px-x-0104020000_102.px","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_103_snap.html","id":null,"dir":"Reference","previous_headings":"","what":"Snapshot of STAT-TAB px 103 — stattab_103_snap","title":"Snapshot of STAT-TAB px 103 — stattab_103_snap","text":"Used tests make easier users look spelling used STAT-TAB.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_103_snap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snapshot of STAT-TAB px 103 — stattab_103_snap","text":"","code":"stattab_103_snap"},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_103_snap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Snapshot of STAT-TAB px 103 — stattab_103_snap","text":"object class tbl_df (inherits tbl, data.frame) 177 rows 6 columns.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_103_snap.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Snapshot of STAT-TAB px 103 — stattab_103_snap","text":"Data obtained Swiss Federal Statistical Office (FSO): https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_106/-/px-x-0104020000_106.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_106_snap.html","id":null,"dir":"Reference","previous_headings":"","what":"Snapshot of STAT-TAB px 106 — stattab_106_snap","title":"Snapshot of STAT-TAB px 106 — stattab_106_snap","text":"Used tests make easier users look spelling used STAT-TAB.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_106_snap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snapshot of STAT-TAB px 106 — stattab_106_snap","text":"","code":"stattab_106_snap"},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_106_snap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Snapshot of STAT-TAB px 106 — stattab_106_snap","text":"object class tbl_df (inherits tbl, data.frame) 103 rows 6 columns.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_106_snap.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Snapshot of STAT-TAB px 106 — stattab_106_snap","text":"Data obtained Swiss Federal Statistical Office (FSO): https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_106/-/px-x-0104020000_106.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_109_snap.html","id":null,"dir":"Reference","previous_headings":"","what":"Snapshot of STAT-TAB px 109 — stattab_109_snap","title":"Snapshot of STAT-TAB px 109 — stattab_109_snap","text":"Used tests make easier users look spelling used STAT-TAB.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_109_snap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snapshot of STAT-TAB px 109 — stattab_109_snap","text":"","code":"stattab_109_snap"},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_109_snap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Snapshot of STAT-TAB px 109 — stattab_109_snap","text":"object class tbl_df (inherits tbl, data.frame) 175 rows 6 columns.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_109_snap.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Snapshot of STAT-TAB px 109 — stattab_109_snap","text":"Data obtained Swiss Federal Statistical Office (FSO): https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0104020000_109/-/px-x-0104020000_109.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_pop_snap.html","id":null,"dir":"Reference","previous_headings":"","what":"Snapshot of STAT-TAB that includes the population records — stattab_pop_snap","title":"Snapshot of STAT-TAB that includes the population records — stattab_pop_snap","text":"Used tests make easier users look spelling used STAT-TAB.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_pop_snap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snapshot of STAT-TAB that includes the population records — stattab_pop_snap","text":"","code":"stattab_pop_snap"},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_pop_snap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Snapshot of STAT-TAB that includes the population records — stattab_pop_snap","text":"object class tbl_df (inherits tbl, data.frame) 2431 rows 7 columns.","code":""},{"path":"https://statistik-aargau.github.io/propop/reference/stattab_pop_snap.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Snapshot of STAT-TAB that includes the population records — stattab_pop_snap","text":"Federal Statistical Office: https://www.pxweb.bfs.admin.ch/pxweb/en/px-x-0102010000_101/-/px-x-0102010000_101.px/","code":""},{"path":"https://statistik-aargau.github.io/propop/news/index.html","id":"propop-140","dir":"Changelog","previous_headings":"","what":"propop 1.4.0","title":"propop 1.4.0","text":"propop::propop() can now perform multiple projection scenarios single run. New function check_balance check population equation row output propop::propop() (population beginning year plus components must equal population end year). function prepare_evaluation additional set age groups (0-19, 20-39, 40-59, 60-79, 80 years older). output created function can used compute_measures aggregate_measures evaluate projection models benchmark.","code":""},{"path":"https://statistik-aargau.github.io/propop/news/index.html","id":"propop-130","dir":"Changelog","previous_headings":"","what":"propop 1.3.0","title":"propop 1.3.0","text":"Uses new scenarios published FSO April 2025 Updated functions, package data, documentation Added “scenario” output console","code":""},{"path":"https://statistik-aargau.github.io/propop/news/index.html","id":"propop-122","dir":"Changelog","previous_headings":"","what":"propop 1.2.2","title":"propop 1.2.2","text":"Projections enabled beyond 2018-2050.","code":""},{"path":"https://statistik-aargau.github.io/propop/news/index.html","id":"propop-121","dir":"Changelog","previous_headings":"","what":"propop 1.2.1","title":"propop 1.2.1","text":"get_population: Using clearer, intuitive name argument specify start year; less typing users; revised function documentation detailed feedback running propop::propop(), stating arguments used)","code":""},{"path":"https://statistik-aargau.github.io/propop/news/index.html","id":"propop-120","dir":"Changelog","previous_headings":"","what":"propop 1.2.0","title":"propop 1.2.0","text":"Added function calculate_shares distribute FSO estimates expressed “number people” among sub-cantonal entitities (e.g., immigration municipalities).","code":""},{"path":"https://statistik-aargau.github.io/propop/news/index.html","id":"propop-110","dir":"Changelog","previous_headings":"","what":"propop 1.1.0","title":"propop 1.1.0","text":"Added unit test fails projection outcomes differ FSO projections Increased flexibility prepare_evaluation() offering possibility indicate column contains population (rather assuming ’s called n).","code":""},{"path":[]},{"path":"https://statistik-aargau.github.io/propop/news/index.html","id":"projection-using-separate-parameters-for-migration-between-cantons-1-0-0","dir":"Changelog","previous_headings":"","what":"Projection using separate parameters for migration between cantons","title":"propop 1.0.0","text":"propop::propop() now uses separate input parameters emigration / immigration cantons. Previously propop::propop() used net difference emigration / immigration cantons. change, new version now directly corresponds projection equations provided FSO. change also facilated inclusion components cohort component method output. makes easy track transition one year next.","code":""},{"path":"https://statistik-aargau.github.io/propop/news/index.html","id":"new-variable-names-1-0-0","dir":"Changelog","previous_headings":"","what":"New variable names","title":"propop 1.0.0","text":"change required comprehensive renaming several variables, makes new version incompatible previous code. want continue using old code, suggest using version 0.2.0. Note components projection equation included output version 0.2.0.","code":""},{"path":[]},{"path":"https://statistik-aargau.github.io/propop/news/index.html","id":"projection-without-distinction-of-nationalities-0-2-0","dir":"Changelog","previous_headings":"","what":"Projection without distinction of nationalities","title":"propop 0.2.0","text":"desired, projections can run one nationality (longer required provide two nationalities). propop::propop() returns plain text feedback console summarizing settings used run projection.","code":""},{"path":[]},{"path":"https://statistik-aargau.github.io/propop/news/index.html","id":"development-history-and-earlier-versions-0-1-0","dir":"Changelog","previous_headings":"","what":"Development history and earlier versions","title":"propop 0.1.0","text":"propop package successor staagBevProj (publicly available), last updated December 2022. staagBevProj developed Tina Cornioley, Jan Wunder, Niklas Haffert. head Official Statistics Aargau, Andrea Plüss supported devlopment well publication staagBevProj propop. propop developed Norah Efosa Adrian Gadient (Statistik Aargau). main innovations : Clearer separation code prepares data code runs projection Centrally united FSO parameters corrections / adjustments; now gathered single data frame passed projection function one function run projections (rather projectPop projectAll) Convenience functions directly download data parameters STAT-TAB Incorporation assertions unit tests Function evaluate projection results Clearer documentation","code":""}]
