---
title: "WIP: New function `propop::propop_tables()`"
subtitle: "Run projections with `tibbles`, `purrr` and `dplyr`"
author: "Statistik Aargau (2025), Norah Efosa"
date: April 2025
format:
  html:
    embed-resources: true
    link-external-icon: true
    theme: lumen 
    link-external-newwindow: true
    toc: true
    toc-location: left
    toc-title: "Interactive toc"
    toc-depth: 5
editor_options: 
  chunk_output_type: console
cache: false
---

# Introduction

`propop::propop_tables()` is a `dplyr`-version of `propop::propop()` (matrices).

✅modular structure

✅mainly dplyr-coded

✅more flexibility for adding/removing columns

✅for now, both functions will be kept and maintained

```{r packages, echo = FALSE, eval = TRUE, message = FALSE, warning = FALSE}
# Install propop from the development branch
# devtools::install_github("statistik-aargau/propop", ref = "f-proj-tables2025-2055")

# Load packages
library(propop)
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggtext)

add_percent <- function(x) {
  paste0(x, "%")
}
options(scipen = 999)
```

## Overview: `propop_tables()`

### Function arguments

The new function's arguments are identical to `propop::propop()`:

(only the first four arguments in blue are mandatory)

```{r, echo = TRUE, eval = FALSE}
propop::propop_tables(
  parameters,
  population,
  year_first,
  year_last,
  age_groups = 101,
  fert_first = 16,
  fert_last = 50,
  share_born_female = 100 / 205,
  subregional = FALSE,
  binational = TRUE,
  spatial_unit = "spatial_unit"
)
```

### Structure

![](overview_propop_tables.png)

#### Excerpt from `propop_tables()`

```{r, echo = TRUE, eval = FALSE}
# [...]
# Run projection ----
# iterate across spatial units and years
 df_result <- purrr::reduce(
    .x = list_parameters,
    .f = \(population, parameters) project_population(
      population, parameters,
      subregional = subregional
    ),
    .init = init_population
  )
# [...]
```

### Performance for one region (Canton of Aargau)

We use STAT-TAB data as described in the [vignette for projecting a single region](vignettes/project_single_region.Rmd):

```{r message = FALSE, warning = FALSE, result = FALSE}
# Run propop with tables (new feature)
system.time({
  result_tables <- propop::propop_tables(
    parameters = fso_parameters,
    # scenarios = "reference",
    year_first = 2024,
    year_last = 2030,
    population = fso_population,
    # subregional = FALSE,
    binational = TRUE
  )
})

# Run propop with matrices (original)
system.time({
  result_matrices <- propop::propop(
    parameters = fso_parameters,
    year_first = 2024,
    year_last = 2030,
    population = fso_population,
    subregional = FALSE,
    binational = TRUE
  )
})
```

#### Comparison between `propop::tables()` and `propop::propop()`

```{r comparison-propop, echo = FALSE, eval = TRUE, message = FALSE, warning = FALSE, result = FALSE}
# Compare results
compare_models <- result_matrices |>
  arrange(year, nat, sex, age) |>
  select(year:nat, births:n_dec) |>
  mutate(acq = case_when(nat == "int" ~ NA, .default = acq)) |>
  tidyr::pivot_longer(
    cols = -c(year:nat),
    names_to = "variable",
    values_to = "n_matrix"
  ) |>
  # join results
  left_join(
    result_tables |>
      mutate(acq_n = case_when(nat == "int" ~ NA, .default = acq_n)) |>
      select(
        year:births,
        mor = mor_n, emi_int = emi_int_n, emi_nat = emi_nat_n,
        imm_int = imm_int_n, imm_nat = imm_nat_n, acq = acq_n, n_dec
      ) |>
      pivot_longer(
        cols = -c(year:age),
        names_to = "variable",
        values_to = "n_tables"
      ),
    by = join_by(year, scen, spatial_unit, age, sex, nat, variable)
  ) |>
  # create age groups
  mutate(
    age_groups = case_when(
      age < 20 ~ "age_00_19",
      age >= 20 & age < 40 ~ "age_20_39",
      age >= 40 & age < 60 ~ "age_40_59",
      age >= 60 & age < 80 ~ "age_60_79",
      age >= 80 ~ "age_80_plus"
    )
  ) |>
  summarize(
    n_matrix = sum(n_matrix, na.rm = TRUE),
    n_tables = sum(n_tables, na.rm = TRUE),
    .by = c(year, scen, spatial_unit, variable, age_groups)
  ) |>
  # compute evaluation
  mutate(
    error = n_matrix - n_tables,
    pe = (error / n_matrix) * 100,
    ape = (abs(error) / n_matrix) * 100
  )
```

```{r plot, echo = FALSE, eval = TRUE, message = FALSE, warning = FALSE}
# Plot each projection component
compare_models |>
  mutate(
    pe = case_when((variable == "births" & error == 0) ~ 0, .default = pe),
    variable = factor(
      variable,
      levels = c(
        "n_dec", "births", "imm_int", "imm_nat", "emi_int", "emi_nat",
        "acq", "mor"
      ),
      labels = c(
        "total n", "births", "international immigration",
        "intercantonal immigration", "international emigration",
        "intercantonal emigration", "acquisition of CH citizenship",
        "deaths"
      )
    ),
  ) |>
  ggplot2::ggplot(
    ggplot2::aes(x = as.numeric(year), y = pe, color = age_groups, pch = scen)
  ) +
  geom_hline(yintercept = 0, linewidth = 0.3) +
  geom_point() +
  scale_y_continuous(
    labels = add_percent,
    limits = c(-1, 5),
    breaks = c(-1, 0, 1, 3, 5)
  ) +
  labs(
    title = "Differences between propop_tables() and propop() (benchmark)",
    subtitle = "by projected year and age group across the Canton of Aargau (2024-2030)",
    x = "Year",
    y = "Mean difference in percent"
  ) +
  scale_color_manual(values = rev(c("#007AB8", "#ffa81f", "#A05388", "#ffe562", "#96D4FF"))) +
  scale_shape_manual(values = c(1, 4, 6)) +
  scale_x_continuous(breaks = c(2020, 2025, 2030)) +
  theme_bw() +
  theme(
    legend.position = "right",
    plot.title = element_markdown(size = 14),
    axis.title.y = element_text(size = 9),
    axis.title.x = element_text(size = 9),
    axis.text.x = element_text(size = 9),
    axis.text.y = element_text(size = 9),
    legend.text = element_text(size = 9),
    legend.title = element_blank()
  ) +
  ggplot2::facet_wrap(~ variable)
```


### Performance for five subregions

```{r data-parameters} 
# FSO parameters for fictitious subregions
fso_parameters_sub <- fso_parameters |>
  # duplicating rows 5 times
  tidyr::uncount(5) |>
  # create 5 subregions
  dplyr::mutate(spatial_unit = rep(1:5, times = nrow(fso_parameters))) |>
  dplyr::mutate(spatial_unit = as.character(spatial_unit))

# Generate 5 random "cuts" to distribute the original population; 
# avoid extreme values with a range of 0.1 to 0.5
cut_1 <- {
  set.seed(1)
  round(runif(1, min = 0.1, max = 0.5), digits = 2)
}
cut_2 <- {
  set.seed(2)
  round(runif(1, min = 0.1, max = 0.5), digits = 2)
}
cut_3 <- {
  set.seed(3)
  round(runif(1, min = 0.1, max = 0.5), digits = 2)
}
cut_4 <- {
  set.seed(4)
  round(runif(1, min = 0.1, max = 0.5), digits = 2)
}
# make sure everything adds up to 100%
cut_5 <- 1 - cut_1 - cut_2 - cut_3 - cut_4

# Generate population data for five subregions
df_population_sub <- fso_population |>
  # duplicating rows 5 times
  tidyr::uncount(5) |>
  # create 5 subregions
  dplyr::mutate(
    spatial_unit = as.character(rep(1:5, times = nrow(fso_population)))
  ) |>
  dplyr::mutate(
    # Distribute original population according to "cuts"
    n = dplyr::case_match(
      spatial_unit,
      "1" ~ round(n * cut_1),
      "2" ~ round(n * cut_2),
      "3" ~ round(n * cut_3),
      "4" ~ round(n * cut_4),
      "5" ~ round(n * cut_5),
      .default = NA
    ),
    .keep = "all"
  )

parameters_sub_mig <- fso_parameters_sub |>
  # Create fictitious migration parameters
  dplyr::mutate(
    mig_sub = dplyr::case_when(
      # Four regions with emigration, 1 region with immigration
      spatial_unit == 1 ~ {
        set.seed(1)
        round(rnorm(1, mean = 0, sd = 0.2), digits = 4)
      },
      spatial_unit == 2 ~ {
        set.seed(2)
        round(rnorm(1, mean = 0, sd = 0.2), digits = 4)
      },
      spatial_unit == 3 ~ {
        set.seed(25)
        round(rnorm(1, mean = 0, sd = 0.2), digits = 4)
      },
      spatial_unit == 4 ~ {
        set.seed(12)
        round(rnorm(1, mean = 0, sd = 0.2), digits = 4)
      },
      TRUE ~ NA
    )
  ) |>
  dplyr::mutate(
    mig_sub = dplyr::case_when(
      spatial_unit == 5 ~ 0 - sum(mig_sub, na.rm = TRUE), TRUE ~ mig_sub
    ),
    # check = sum(mig_sub, na.rm = TRUE),
    .by = c("nat", "sex", "age", "year", "scen")
  ) |>
  dplyr::select(
    nat, sex, age, year, scen, spatial_unit, birthrate, int_mothers, mor,
    emi_int, emi_nat, imm_int_n, imm_nat_n, acq, emi_nat_n, mig_nat_n, mig_sub
  )
```


```{r eval = FALSE, message = FALSE, warning = FALSE, result = FALSE}
# Run propop with tables (new feature)
system.time({
  result_tables_sub <- propop::propop_tables(
    parameters = parameters_sub_mig |> 
    # mutate(emi_sub = 0, imm_sub = 0),
    year_first = 2024,
    year_last = 2030,
    population = df_population_sub,
    subregional = "rate",
    binational = TRUE
  )
})

# Run propop with matrices (original)
system.time({
  result_matrices_sub <- propop::propop(
    parameters = parameters_sub_mig,
    year_first = 2024,
    year_last = 2030,
    population = df_population_sub,
    subregional = TRUE,
    binational = TRUE
  )
})
```

```{r comparison-propop-sub, echo = FALSE, eval = TRUE, message = FALSE, warning = FALSE, result = FALSE}
# Compare results
compare_models_sub <- result_matrices_sub |>
  arrange(year, nat, sex, age) |>
  select(year:nat, births:n_dec) |>
  mutate(acq = case_when(nat == "int" ~ NA, .default = acq)) |>
  tidyr::pivot_longer(
    cols = -c(year:nat),
    names_to = "variable",
    values_to = "n_matrix"
  ) |>
  # join results
  left_join(
    result_tables_sub |>
      mutate(acq_n = case_when(nat == "int" ~ NA, .default = acq_n)) |>
      select(
        year:births,
        mor = mor_n, emi_int = emi_int_n, emi_nat = emi_nat_n,
        imm_int = imm_int_n, imm_nat = imm_nat_n, n_dec
      ) |>
      pivot_longer(
        cols = -c(year:age),
        names_to = "variable",
        values_to = "n_tables"
      ),
    by = join_by(year, scen, spatial_unit, age, sex, nat, variable)
  ) |>
  # create age groups
  mutate(
    age_groups = case_when(
      age < 20 ~ "age_00_19",
      age >= 20 & age < 40 ~ "age_20_39",
      age >= 40 & age < 60 ~ "age_40_59",
      age >= 60 & age < 80 ~ "age_60_79",
      age >= 80 ~ "age_80_plus"
    )
  ) |>
  summarize(
    n_matrix = sum(n_matrix, na.rm = TRUE),
    n_tables = sum(n_tables, na.rm = TRUE),
    .by = c(year, scen, spatial_unit, variable, age_groups)
  ) |>
  # compute evaluation
  mutate(
    error = n_matrix - n_tables,
    pe = (error / n_matrix) * 100,
    ape = (abs(error) / n_matrix) * 100
  )
```

```{r plot-sub, echo = FALSE, eval = TRUE, message = FALSE, warning = FALSE}
# Plot each projection component
compare_models_sub |>
  filter(variable %in% c("n_dec", "births", "imm_int", "imm_nat", "emi_int", "emi_nat", "mor")) |> 
  mutate(
    pe = case_when((variable == "births" & error == 0) ~ 0, .default = pe),
    variable = factor(
      variable,
      levels = c(
        "n_dec", "births", "imm_int", "imm_nat", "emi_int", "emi_nat", "mor"
      ),
      labels = c(
        "total n", "births", "international immigration",
        "intercantonal immigration", "international emigration",
        "intercantonal emigration", "deaths"
      )
    )
  ) |>
  # exclude births for older age groups
  filter(!(variable == "births" & age_groups != "age_00_19")) |> 
  ggplot2::ggplot(
    ggplot2::aes(x = as.numeric(year), y = pe, color = age_groups, pch = scen)
  ) +
  geom_hline(yintercept = 0, linewidth = 0.3) +
  geom_point() +
  scale_y_continuous(
    labels = add_percent,
    limits = c(-1, 5),
    breaks = c(-1, 0, 1, 3, 5)
  ) +
  labs(
    title = "Differences between propop_tables() and propop() (benchmark)",
    subtitle = "by projected year and age group across the Canton of Aargau (2024-2030)",
    x = "Year",
    y = "Mean difference in percent"
  ) +
  scale_color_manual(values = rev(c("#007AB8", "#ffa81f", "#A05388", "#ffe562", "#96D4FF"))) +
  scale_shape_manual(values = c(1, 4, 6)) +
  scale_x_continuous(breaks = c(2020, 2025, 2030)) +
  theme_bw() +
  theme(
    legend.position = "right",
    plot.title = element_markdown(size = 14),
    axis.title.y = element_text(size = 9),
    axis.title.x = element_text(size = 9),
    axis.text.x = element_text(size = 9),
    axis.text.y = element_text(size = 9),
    legend.text = element_text(size = 9),
    legend.title = element_blank()
  ) +
  ggplot2::facet_wrap(~ variable + spatial_unit)
```

# Next steps

-   [ ] Fine tuning for rates (esp. people aged 80 years and older)
-   [x] Evaluation for subregions (in progress)
-       [ ] evaluate computation speed
        [ ] tests with real data
-   [ ] Code cleaning, function-feedback, package tests
-   [ ] Integration into the main branch
